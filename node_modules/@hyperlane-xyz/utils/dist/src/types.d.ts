import { ethers } from 'ethers';
/********* BASIC TYPES *********/
export declare type Domain = number;
export declare type Address = string;
export declare type AddressBytes32 = string;
export declare type HexString = string;
export declare type SignatureLike = {
    r: string;
    s?: string;
    _vs?: string;
    recoveryParam?: number;
    v?: number;
} | ethers.utils.BytesLike;
export declare type MerkleProof = {
    branch: ethers.utils.BytesLike[];
    leaf: ethers.utils.BytesLike;
    index: number;
};
/********* HYPERLANE CORE *********/
export declare type Checkpoint = {
    root: string;
    index: number;
    signature: SignatureLike;
};
export declare type CallData = {
    to: Address;
    data: string;
};
export declare enum MessageStatus {
    NONE = 0,
    PROCESSED = 1
}
export declare type ParsedMessage = {
    version: number;
    nonce: number;
    origin: number;
    sender: string;
    destination: number;
    recipient: string;
    body: string;
};
export declare type ParsedLegacyMultisigIsmMetadata = {
    checkpointRoot: string;
    checkpointIndex: number;
    originMailbox: string;
    proof: ethers.utils.BytesLike[];
    signatures: ethers.utils.BytesLike[];
    validators: ethers.utils.BytesLike[];
};
export declare enum InterchainSecurityModuleType {
    MULTISIG = 3
}
//# sourceMappingURL=types.d.ts.map