"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = exports.BaseValidator = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
/**
 * Utilities for validators to construct and verify checkpoints.
 */
class BaseValidator {
    constructor(address, localDomain, mailbox) {
        this.localDomain = localDomain;
        this.address = address;
        this.mailbox = mailbox;
    }
    domainHash() {
        return (0, utils_1.domainHash)(this.localDomain, this.mailbox);
    }
    message(root, index) {
        return ethers_1.ethers.utils.solidityPack(['bytes32', 'bytes32', 'uint32'], [this.domainHash(), root, index]);
    }
    messageHash(root, index) {
        const message = this.message(root, index);
        return ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(message));
    }
    recoverAddressFromCheckpoint(checkpoint) {
        const msgHash = this.messageHash(checkpoint.root, checkpoint.index);
        return ethers_1.ethers.utils.verifyMessage(msgHash, checkpoint.signature);
    }
    matchesSigner(checkpoint) {
        return (this.recoverAddressFromCheckpoint(checkpoint).toLowerCase() ===
            this.address.toLowerCase());
    }
}
exports.BaseValidator = BaseValidator;
/**
 * Extension of BaseValidator that includes ethers signing utilities.
 */
class Validator extends BaseValidator {
    constructor(signer, address, localDomain, mailbox) {
        super(address, localDomain, mailbox);
        this.signer = signer;
    }
    static fromSigner(signer, localDomain, mailbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Validator(signer, yield signer.getAddress(), localDomain, mailbox);
        });
    }
    signCheckpoint(root, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const msgHash = this.messageHash(root, index);
            const signature = yield this.signer.signMessage(msgHash);
            return {
                root,
                index,
                signature,
            };
        });
    }
}
exports.Validator = Validator;
//# sourceMappingURL=validator.js.map