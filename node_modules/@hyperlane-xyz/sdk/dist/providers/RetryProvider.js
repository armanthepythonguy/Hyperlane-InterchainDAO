"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryJsonRpcProvider = void 0;
// RetryProvider Mostly taken from the removed version that was in ethers.js
// See: https://github.com/ethers-io/ethers.js/discussions/3006
const ethers_1 = require("ethers");
const utils_1 = require("@hyperlane-xyz/utils");
class RetryJsonRpcProvider extends ethers_1.ethers.providers
    .StaticJsonRpcProvider {
    constructor(retryOptions, url, network) {
        super(url, network);
        utils_1.utils.assert(retryOptions.maxRequests >= 1, 'RetryOptions.maxRequests must be >= 1');
        utils_1.utils.assert(retryOptions.baseRetryMs >= 1, 'RetryOptions.baseRetryMs must be >= 1');
        this.retryOptions = retryOptions;
    }
    send(method, params) {
        const _super = Object.create(null, {
            send: { get: () => super.send }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return utils_1.utils.retryAsync(() => _super.send.call(this, method, params), this.retryOptions.maxRequests, this.retryOptions.baseRetryMs);
        });
    }
}
exports.RetryJsonRpcProvider = RetryJsonRpcProvider;
//# sourceMappingURL=RetryProvider.js.map