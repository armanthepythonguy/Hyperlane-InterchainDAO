import { types } from '@hyperlane-xyz/utils';
import { HyperlaneContractsMap } from '../contracts';
import { CoreFactories } from '../core/contracts';
import { CoreConfig } from '../core/types';
import { IgpFactories } from '../gas/contracts';
import { CoinGeckoInterface, CoinGeckoResponse, CoinGeckoSimpleInterface, CoinGeckoSimplePriceParams } from '../gas/token-prices';
import { MultiProvider } from '../providers/MultiProvider';
import { RouterConfig } from '../router/types';
import { ChainMap, ChainName } from '../types';
export declare function randomInt(max: number, min?: number): number;
export declare function randomAddress(): types.Address;
export declare function createRouterConfigMap(owner: types.Address, coreContracts: HyperlaneContractsMap<CoreFactories>, igpContracts: HyperlaneContractsMap<IgpFactories>): ChainMap<RouterConfig>;
export declare function deployTestIgpsAndGetRouterConfig(multiProvider: MultiProvider, owner: types.Address, coreContracts: HyperlaneContractsMap<CoreFactories>): Promise<ChainMap<RouterConfig>>;
export declare function testCoreConfig(chains: ChainName[]): ChainMap<CoreConfig>;
export declare class MockCoinGecko implements CoinGeckoInterface {
    private tokenPrices;
    private fail;
    constructor();
    price(params: CoinGeckoSimplePriceParams): CoinGeckoResponse;
    get simple(): CoinGeckoSimpleInterface;
    setTokenPrice(chain: ChainName, price: number): void;
    setFail(chain: ChainName, fail: boolean): void;
}
//# sourceMappingURL=testUtils.d.ts.map