"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockCoinGecko = exports.testCoreConfig = exports.deployTestIgpsAndGetRouterConfig = exports.createRouterConfigMap = exports.randomAddress = exports.randomInt = void 0;
const ethers_1 = require("ethers");
const core_1 = require("@hyperlane-xyz/core");
const chainMetadata_1 = require("../consts/chainMetadata");
const types_1 = require("../ism/types");
const objects_1 = require("../utils/objects");
function randomInt(max, min = 0) {
    return Math.floor(Math.random() * (max - min)) + min;
}
exports.randomInt = randomInt;
function randomAddress() {
    return ethers_1.ethers.utils.hexlify(ethers_1.ethers.utils.randomBytes(20));
}
exports.randomAddress = randomAddress;
function createRouterConfigMap(owner, coreContracts, igpContracts) {
    return (0, objects_1.objMap)(coreContracts, (chain, contracts) => {
        return {
            owner,
            mailbox: contracts.mailbox.address,
            interchainGasPaymaster: igpContracts[chain].interchainGasPaymaster.address,
        };
    });
}
exports.createRouterConfigMap = createRouterConfigMap;
function deployTestIgpsAndGetRouterConfig(multiProvider, owner, coreContracts) {
    return __awaiter(this, void 0, void 0, function* () {
        const igps = {};
        for (const chain of multiProvider.getKnownChainNames()) {
            const factory = new core_1.TestInterchainGasPaymaster__factory(multiProvider.getSigner(chain));
            igps[chain] = yield factory.deploy(owner);
        }
        return (0, objects_1.objMap)(coreContracts, (chain, contracts) => {
            return {
                owner,
                mailbox: contracts.mailbox.address,
                interchainGasPaymaster: igps[chain].address,
            };
        });
    });
}
exports.deployTestIgpsAndGetRouterConfig = deployTestIgpsAndGetRouterConfig;
const nonZeroAddress = ethers_1.ethers.constants.AddressZero.replace('00', '01');
// dummy config as TestInbox and TestOutbox do not use deployed ISM
function testCoreConfig(chains) {
    const multisigIsm = {
        type: types_1.ModuleType.MERKLE_ROOT_MULTISIG,
        validators: [nonZeroAddress],
        threshold: 1,
    };
    return Object.fromEntries(chains.map((local) => [
        local,
        {
            owner: nonZeroAddress,
            defaultIsm: {
                type: types_1.ModuleType.ROUTING,
                owner: nonZeroAddress,
                domains: Object.fromEntries(chains
                    .filter((c) => c !== local)
                    .map((remote) => [remote, multisigIsm])),
            },
        },
    ]));
}
exports.testCoreConfig = testCoreConfig;
// A mock CoinGecko intended to be used by tests
class MockCoinGecko {
    constructor() {
        this.tokenPrices = {};
        this.fail = {};
    }
    price(params) {
        const data = {};
        for (const id of params.ids) {
            if (this.fail[id]) {
                return Promise.reject(`Failed to fetch price for ${id}`);
            }
            data[id] = {
                usd: this.tokenPrices[id],
            };
        }
        return Promise.resolve({
            success: true,
            message: '',
            code: 200,
            data,
        });
    }
    get simple() {
        return this;
    }
    setTokenPrice(chain, price) {
        const id = chainMetadata_1.chainMetadata[chain].gasCurrencyCoinGeckoId || chain;
        this.tokenPrices[id] = price;
    }
    setFail(chain, fail) {
        const id = chainMetadata_1.chainMetadata[chain].gasCurrencyCoinGeckoId || chain;
        this.fail[id] = fail;
    }
}
exports.MockCoinGecko = MockCoinGecko;
//# sourceMappingURL=testUtils.js.map