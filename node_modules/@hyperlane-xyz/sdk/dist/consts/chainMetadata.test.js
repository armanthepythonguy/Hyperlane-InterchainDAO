"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chainMetadata_1 = require("./chainMetadata");
const minimalSchema = {
    chainId: 5,
    name: 'goerli',
    protocol: chainMetadata_1.ProtocolType.Ethereum,
    publicRpcUrls: [{ http: 'https://foobar.com' }],
};
const blockExplorers = [
    {
        name: 'scan',
        url: 'https://foobar.com',
        apiUrl: 'https://api.foobar.com',
    },
];
const blocks = {
    confirmations: 1,
    estimateBlockTime: 10,
};
describe('ChainMetadataSchema', () => {
    it('Accepts valid schemas', () => {
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(minimalSchema)).to.eq(true);
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(Object.assign(Object.assign({}, minimalSchema), { blockExplorers }))).to.eq(true);
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(Object.assign(Object.assign({}, minimalSchema), { blockExplorers }))).to.eq(true);
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(Object.assign(Object.assign({}, minimalSchema), { blockExplorers,
            blocks }))).to.eq(true);
    });
    it('Rejects invalid schemas', () => {
        (0, chai_1.expect)(
        //@ts-ignore
        (0, chainMetadata_1.isValidChainMetadata)({})).to.eq(false);
        //@ts-ignore
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(Object.assign(Object.assign({}, minimalSchema), { chainId: 'id' }))).to.eq(false);
        (0, chai_1.expect)((0, chainMetadata_1.isValidChainMetadata)(Object.assign(Object.assign({}, minimalSchema), { blockExplorers: [
                Object.assign(Object.assign({}, blockExplorers[0]), { apiUrl: 'not-a-url' }),
            ] }))).to.eq(false);
    });
});
//# sourceMappingURL=chainMetadata.test.js.map