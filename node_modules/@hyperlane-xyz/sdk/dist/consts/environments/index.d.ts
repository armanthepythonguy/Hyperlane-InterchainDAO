import { ChainName } from '../../types';
export declare const hyperlaneEnvironments: {
    test: {
        test1: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
        test2: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
        test3: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
    };
    testnet: {
        alfajores: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        fuji: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        mumbai: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        bsctestnet: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        goerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        moonbasealpha: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        optimismgoerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        arbitrumgoerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        sepolia: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
    };
    mainnet: {
        celo: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        ethereum: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        avalanche: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        polygon: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        bsc: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        arbitrum: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        optimism: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        moonbeam: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
        gnosis: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            create2Factory: string;
            testRecipient: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
        };
    };
};
export declare type HyperlaneEnvironment = keyof typeof hyperlaneEnvironments;
export declare type HyperlaneEnvironmentChain<E extends HyperlaneEnvironment> = Extract<keyof typeof hyperlaneEnvironments[E], ChainName>;
export declare const hyperlaneContractAddresses: any;
//# sourceMappingURL=index.d.ts.map