import type { Chain as WagmiChain } from '@wagmi/chains';
import type { providers } from 'ethers';
import { z } from 'zod';
import type { types } from '@hyperlane-xyz/utils';
import type { RetryProviderOptions } from '../providers/RetryProvider';
import { ChainMap, ChainName } from '../types';
export declare enum ExplorerFamily {
    Etherscan = "etherscan",
    Blockscout = "blockscout",
    Other = "other"
}
export declare enum ProtocolType {
    Ethereum = "ethereum",
    Sealevel = "sealevel",
    Fuel = "fuel"
}
export declare type ExplorerFamilyType = `${ExplorerFamily}`;
/**
 * Collection of useful properties and settings
 * for Hyperlane-supported chains
 */
export interface ChainMetadata {
    chainId: number;
    /** Hyperlane domain, only required if differs from id above */
    domainId?: number;
    name: ChainName;
    protocol: ProtocolType;
    /** Human-readable name */
    displayName?: string;
    /** Shorter human-readable name */
    displayNameShort?: string;
    /** Default currency/token used by chain */
    nativeToken?: {
        name: string;
        symbol: string;
        decimals: number;
    };
    /** Collection of RPC endpoints */
    publicRpcUrls: Array<{
        http: string;
        webSocket?: string;
        pagination?: RpcPaginationOptions;
        retry?: RetryProviderOptions;
    }>;
    /** Collection of block explorers */
    blockExplorers?: Array<{
        name: string;
        url: string;
        apiUrl: string;
        apiKey?: string;
        family?: ExplorerFamilyType;
    }>;
    blocks?: {
        /** Number of blocks to wait before considering a transaction confirmed */
        confirmations: number;
        /** Number of blocks before a transaction has a near-zero chance of reverting */
        reorgPeriod?: number;
        /** Rough estimate of time per block in seconds */
        estimateBlockTime?: number;
    };
    /** Settings to use when forming transaction requests */
    transactionOverrides?: Partial<providers.TransactionRequest>;
    /** Address for Ethereum Name Service registry */
    ensAddress?: types.Address;
    /** The CoinGecko API sometimes expects IDs that do not match ChainNames */
    gasCurrencyCoinGeckoId?: string;
    /** URL of the gnosis safe transaction service */
    gnosisSafeTransactionServiceUrl?: string;
    /** Is chain a testnet or a mainnet */
    isTestnet?: boolean;
}
export interface RpcPaginationOptions {
    /** Maximum number of blocks to query between (e.g. for fetching logs) */
    maxBlockRange?: number;
    /** Absolute lowest block number from which to query */
    minBlockNumber?: number;
    /** Relative num blocks from latest from which to query */
    maxBlockAge?: number;
}
/**
 * Zod schema for ChainMetadata validation
 * Keep in sync with ChainMetadata above
 */
export declare const ChainMetadataSchema: z.ZodObject<{
    chainId: z.ZodNumber;
    domainId: z.ZodOptional<z.ZodNumber>;
    name: z.ZodString;
    protocol: z.ZodString;
    displayName: z.ZodOptional<z.ZodString>;
    displayNameShort: z.ZodOptional<z.ZodString>;
    nativeToken: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        symbol: z.ZodString;
        decimals: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        symbol: string;
        name: string;
        decimals: number;
    }, {
        symbol: string;
        name: string;
        decimals: number;
    }>>;
    publicRpcUrls: z.ZodArray<z.ZodObject<{
        http: z.ZodString;
        webSocket: z.ZodOptional<z.ZodString>;
        pagination: z.ZodOptional<z.ZodObject<{
            maxBlockRange: z.ZodOptional<z.ZodNumber>;
            minBlockNumber: z.ZodOptional<z.ZodNumber>;
            maxBlockAge: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxRequests: z.ZodNumber;
            baseRetryMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxRequests: number;
            baseRetryMs: number;
        }, {
            maxRequests: number;
            baseRetryMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }>, "atleastone">;
    blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        url: z.ZodString;
        apiUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodNativeEnum<typeof ExplorerFamily>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodNumber;
        reorgPeriod: z.ZodOptional<z.ZodNumber>;
        estimateBlockTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }>>;
    transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
    gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
    isTestnet: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    chainId: number;
    protocol: string;
    publicRpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}, {
    name: string;
    chainId: number;
    protocol: string;
    publicRpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}>;
/**
 * Common native currencies
 */
export declare const avaxToken: {
    decimals: number;
    name: string;
    symbol: string;
};
export declare const bnbToken: {
    decimals: number;
    name: string;
    symbol: string;
};
export declare const celoToken: {
    decimals: number;
    name: string;
    symbol: string;
};
export declare const etherToken: {
    name: string;
    symbol: string;
    decimals: number;
};
export declare const maticToken: {
    name: string;
    symbol: string;
    decimals: number;
};
export declare const xDaiToken: {
    name: string;
    symbol: string;
    decimals: number;
};
/**
 * Chain metadata
 */
export declare const alfajores: ChainMetadata;
export declare const arbitrum: ChainMetadata;
export declare const arbitrumgoerli: ChainMetadata;
export declare const avalanche: ChainMetadata;
export declare const bsc: ChainMetadata;
export declare const bsctestnet: ChainMetadata;
export declare const celo: ChainMetadata;
export declare const ethereum: ChainMetadata;
export declare const fuji: ChainMetadata;
export declare const goerli: ChainMetadata;
export declare const sepolia: ChainMetadata;
export declare const moonbasealpha: ChainMetadata;
export declare const moonbeam: ChainMetadata;
export declare const mumbai: ChainMetadata;
export declare const optimism: ChainMetadata;
export declare const optimismgoerli: ChainMetadata;
export declare const polygon: ChainMetadata;
export declare const gnosis: ChainMetadata;
export declare const test1: ChainMetadata;
export declare const test2: ChainMetadata;
export declare const test3: ChainMetadata;
/**
 * Collection maps
 *
 * NOTE: When adding chains here, consider also adding the
 * corresponding chain logo images in the /sdk/logos/* folders
 */
export declare const chainMetadata: ChainMap<ChainMetadata>;
export declare const wagmiChainMetadata: ChainMap<WagmiChain>;
export declare const chainIdToMetadata: ChainMap<ChainMetadata>;
export declare const mainnetChainsMetadata: Array<ChainMetadata>;
export declare const testnetChainsMetadata: Array<ChainMetadata>;
export declare function isValidChainMetadata(c: ChainMetadata): boolean;
//# sourceMappingURL=chainMetadata.d.ts.map