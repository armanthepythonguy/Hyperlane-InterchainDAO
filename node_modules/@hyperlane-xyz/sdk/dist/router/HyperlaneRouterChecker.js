"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperlaneRouterChecker = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("@hyperlane-xyz/utils");
const HyperlaneAppChecker_1 = require("../deploy/HyperlaneAppChecker");
const types_1 = require("./types");
class HyperlaneRouterChecker extends HyperlaneAppChecker_1.HyperlaneAppChecker {
    checkOwnership(chain) {
        const owner = this.configMap[chain].owner;
        return super.checkOwnership(chain, owner);
    }
    checkChain(chain) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkHyperlaneConnectionClient(chain);
            yield this.checkEnrolledRouters(chain);
            yield this.checkOwnership(chain);
        });
    }
    checkHyperlaneConnectionClient(chain) {
        return __awaiter(this, void 0, void 0, function* () {
            const router = this.app.router(this.app.getContracts(chain));
            const checkConnectionClientProperty = (property, violationType) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const actual = yield router[property]();
                const expected = (_a = this.configMap[chain][property]) !== null && _a !== void 0 ? _a : ethers_1.ethers.constants.AddressZero;
                if (!utils_1.utils.eqAddress(actual, expected)) {
                    const violation = {
                        chain,
                        type: violationType,
                        contract: router,
                        actual,
                        expected,
                    };
                    this.addViolation(violation);
                }
            });
            yield checkConnectionClientProperty('mailbox', types_1.ConnectionClientViolationType.Mailbox);
            yield checkConnectionClientProperty('interchainGasPaymaster', types_1.ConnectionClientViolationType.InterchainGasPaymaster);
            yield checkConnectionClientProperty('interchainSecurityModule', types_1.ConnectionClientViolationType.InterchainSecurityModule);
        });
    }
    checkEnrolledRouters(chain) {
        return __awaiter(this, void 0, void 0, function* () {
            const router = this.app.router(this.app.getContracts(chain));
            yield Promise.all(this.app.remoteChains(chain).map((remoteChain) => __awaiter(this, void 0, void 0, function* () {
                const remoteRouter = this.app.router(this.app.getContracts(remoteChain));
                const remoteDomainId = this.multiProvider.getDomainId(remoteChain);
                const address = yield router.routers(remoteDomainId);
                utils_1.utils.assert(address === utils_1.utils.addressToBytes32(remoteRouter.address));
            })));
        });
    }
}
exports.HyperlaneRouterChecker = HyperlaneRouterChecker;
//# sourceMappingURL=HyperlaneRouterChecker.js.map