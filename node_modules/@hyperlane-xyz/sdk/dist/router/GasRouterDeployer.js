"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasRouterDeployer = void 0;
const HyperlaneRouterDeployer_1 = require("./HyperlaneRouterDeployer");
class GasRouterDeployer extends HyperlaneRouterDeployer_1.HyperlaneRouterDeployer {
    enrollRemoteRouters(contractsMap, configMap, foreignRouters = {}) {
        const _super = Object.create(null, {
            enrollRemoteRouters: { get: () => super.enrollRemoteRouters }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.enrollRemoteRouters.call(this, contractsMap, configMap, foreignRouters);
            this.logger(`Setting enrolled router destination gas...`);
            for (const [chain, contracts] of Object.entries(contractsMap)) {
                const remoteDomains = yield this.router(contracts).domains();
                const remoteChains = remoteDomains.map((domain) => this.multiProvider.getChainName(domain));
                const currentConfigs = yield Promise.all(remoteDomains.map((domain) => this.router(contracts).destinationGas(domain)));
                const remoteConfigs = remoteDomains
                    .map((domain, i) => ({
                    domain,
                    gas: configMap[remoteChains[i]].gas,
                }))
                    .filter(({ gas }, index) => !currentConfigs[index].eq(gas));
                if (remoteConfigs.length == 0) {
                    continue;
                }
                this.logger(`Set destination gas on ${chain} for ${remoteChains}`);
                yield this.multiProvider.handleTx(chain, this.router(contracts).setDestinationGas(remoteConfigs));
            }
        });
    }
}
exports.GasRouterDeployer = GasRouterDeployer;
//# sourceMappingURL=GasRouterDeployer.js.map