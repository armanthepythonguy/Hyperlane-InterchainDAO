"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxiedRouterDeployer = void 0;
const utils_1 = require("@hyperlane-xyz/utils/dist/src/utils");
const HyperlaneRouterDeployer_1 = require("./HyperlaneRouterDeployer");
class ProxiedRouterDeployer extends HyperlaneRouterDeployer_1.HyperlaneRouterDeployer {
    router(contracts) {
        return contracts[this.routerContractName];
    }
    deployContracts(chain, config) {
        const _super = Object.create(null, {
            runIfOwner: { get: () => super.runIfOwner }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const proxyAdmin = yield this.deployContractFromFactory(chain, this.factories.proxyAdmin, 'proxyAdmin', []);
            const proxiedRouter = yield this.deployProxiedContract(chain, this.routerContractName, proxyAdmin.address, yield this.constructorArgs(chain, config), yield this.initializeArgs(chain, config));
            yield _super.runIfOwner.call(this, chain, proxyAdmin, () => __awaiter(this, void 0, void 0, function* () {
                this.logger(`Checking ownership of proxy admin to ${config.owner}`);
                if (!(0, utils_1.eqAddress)(yield proxyAdmin.owner(), config.owner)) {
                    this.logger(`Transferring ownership of proxy admin to ${config.owner}`);
                    return this.multiProvider.handleTx(chain, proxyAdmin.transferOwnership(config.owner));
                }
                return;
            }));
            return {
                [this.routerContractName]: proxiedRouter,
                proxyAdmin,
            };
        });
    }
}
exports.ProxiedRouterDeployer = ProxiedRouterDeployer;
//# sourceMappingURL=ProxiedRouterDeployer.js.map