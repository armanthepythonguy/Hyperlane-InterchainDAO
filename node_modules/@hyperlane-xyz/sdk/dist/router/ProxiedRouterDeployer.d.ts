import { Router } from '@hyperlane-xyz/core';
import { HyperlaneContracts } from '../contracts';
import { ChainName } from '../types';
import { HyperlaneRouterDeployer } from './HyperlaneRouterDeployer';
import { ProxiedFactories, RouterConfig } from './types';
export declare abstract class ProxiedRouterDeployer<Config extends RouterConfig, Factories extends ProxiedFactories, RouterKey extends keyof Factories> extends HyperlaneRouterDeployer<Config, Factories> {
    abstract routerContractName: RouterKey;
    router(contracts: HyperlaneContracts<Factories>): Router;
    abstract constructorArgs(chain: ChainName, config: Config): Promise<Parameters<Factories[RouterKey]['deploy']>>;
    abstract initializeArgs(chain: ChainName, config: Config): Promise<Parameters<Awaited<ReturnType<Factories[RouterKey]['deploy']>>['initialize']>>;
    deployContracts(chain: ChainName, config: Config): Promise<HyperlaneContracts<Factories>>;
}
//# sourceMappingURL=ProxiedRouterDeployer.d.ts.map