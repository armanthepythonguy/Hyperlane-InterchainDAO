"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperlaneIsmFactoryDeployer = void 0;
const debug_1 = __importDefault(require("debug"));
const HyperlaneDeployer_1 = require("../deploy/HyperlaneDeployer");
const objects_1 = require("../utils/objects");
const contracts_1 = require("./contracts");
class HyperlaneIsmFactoryDeployer extends HyperlaneDeployer_1.HyperlaneDeployer {
    constructor(multiProvider) {
        super(multiProvider, contracts_1.ismFactoryFactories, {
            logger: (0, debug_1.default)('hyperlane:IsmFactoryDeployer'),
        });
    }
    deploy(config) {
        const _super = Object.create(null, {
            deploy: { get: () => super.deploy }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if ((0, objects_1.isObject)(config)) {
                return _super.deploy.call(this, config);
            }
            else {
                return _super.deploy.call(this, Object.fromEntries(config.map((c) => [c, true])));
            }
        });
    }
    deployContracts(chain) {
        return __awaiter(this, void 0, void 0, function* () {
            const merkleRootMultisigIsmFactory = yield this.deployContract(chain, 'merkleRootMultisigIsmFactory', []);
            const messageIdMultisigIsmFactory = yield this.deployContract(chain, 'messageIdMultisigIsmFactory', []);
            const aggregationIsmFactory = yield this.deployContract(chain, 'aggregationIsmFactory', []);
            const routingIsmFactory = yield this.deployContract(chain, 'routingIsmFactory', []);
            return {
                merkleRootMultisigIsmFactory,
                messageIdMultisigIsmFactory,
                aggregationIsmFactory,
                routingIsmFactory,
            };
        });
    }
}
exports.HyperlaneIsmFactoryDeployer = HyperlaneIsmFactoryDeployer;
//# sourceMappingURL=HyperlaneIsmFactoryDeployer.js.map