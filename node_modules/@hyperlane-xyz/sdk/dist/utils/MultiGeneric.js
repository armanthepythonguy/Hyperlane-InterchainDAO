"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiGeneric = void 0;
const chains_1 = require("../consts/chains");
// Generalized map container for chain name to some value
class MultiGeneric {
    constructor(chainMap) {
        this.chainMap = chainMap;
    }
    /**
     * Get value for a chain
     * @throws if chain is invalid or has not been set
     */
    get(chain) {
        var _a;
        const value = (_a = this.chainMap[chain]) !== null && _a !== void 0 ? _a : null;
        if (!value) {
            throw new Error(`No chain value found for ${chain}`);
        }
        return value;
    }
    /**
     * Get value for a chain
     * @returns value or null if chain value has not been set
     */
    tryGet(chain) {
        var _a;
        return (_a = this.chainMap[chain]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Set value for a chain
     * @throws if chain is invalid or has not been set
     */
    set(chain, value) {
        this.chainMap[chain] = value;
        return value;
    }
    chains() {
        return Object.keys(this.chainMap).filter((chain) => !chains_1.AllDeprecatedChains.includes(chain));
    }
    forEach(fn) {
        for (const chain of this.chains()) {
            fn(chain, this.chainMap[chain]);
        }
    }
    map(fn) {
        const entries = [];
        for (const chain of this.chains()) {
            entries.push([chain, fn(chain, this.chainMap[chain])]);
        }
        return Object.fromEntries(entries);
    }
    remoteChains(name) {
        return this.chains().filter((key) => key !== name);
    }
    knownChain(chain) {
        return Object.keys(this.chainMap).includes(chain);
    }
}
exports.MultiGeneric = MultiGeneric;
//# sourceMappingURL=MultiGeneric.js.map