declare type MappedObject<M extends Record<any, any>, O> = {
    [Property in keyof M]: O;
};
export declare type ValueOf<T> = T[keyof T];
export declare function objMapEntries<M extends Record<K, I>, K extends keyof M, O, I = ValueOf<M>>(obj: M, func: (k: K, v: I) => O): [K, O][];
export declare function objMap<M extends Record<K, I>, K extends keyof M, O, I = ValueOf<M>>(obj: M, func: (k: K, v: I) => O): MappedObject<M, O>;
export declare function objFilter<K extends string, I, O extends I>(obj: Record<K, I>, func: (k: K, v: I) => v is O): Record<K, O>;
export declare function promiseObjAll<K extends string, V>(obj: {
    [key in K]: Promise<V>;
}): Promise<Record<K, V>>;
export declare function pick<K extends string, V = any>(obj: Record<K, V>, keys: K[]): Record<K, V>;
export declare function isObject(item: any): any;
export declare function objMerge(a: Record<string, any>, b: Record<string, any>, max_depth?: number): any;
export {};
//# sourceMappingURL=objects.d.ts.map