import { Debugger } from 'debug';
import { MultiProvider } from '../../providers/MultiProvider';
import { ChainMap, ChainName } from '../../types';
import { MultiGeneric } from '../../utils/MultiGeneric';
import { CompilerOptions, ContractVerificationInput, VerificationInput } from './types';
export declare class ContractVerifier extends MultiGeneric<VerificationInput> {
    protected readonly multiProvider: MultiProvider;
    protected readonly apiKeys: ChainMap<string>;
    protected readonly flattenedSource: string;
    protected readonly compilerOptions: CompilerOptions;
    protected logger: Debugger;
    constructor(verificationInputs: ChainMap<VerificationInput>, multiProvider: MultiProvider, apiKeys: ChainMap<string>, flattenedSource: string, // flattened source code from eg `hardhat flatten`
    compilerOptions: CompilerOptions);
    verify(targets?: string[]): Promise<PromiseSettledResult<void>[]>;
    verifyChain(chain: ChainName, inputs: VerificationInput): Promise<void>;
    private submitForm;
    private isAlreadyVerified;
    verifyProxy(chain: ChainName, input: ContractVerificationInput): Promise<void>;
    verifyImplementation(chain: ChainName, input: ContractVerificationInput): Promise<void>;
    verifyContract(chain: ChainName, input: ContractVerificationInput): Promise<void>;
}
//# sourceMappingURL=ContractVerifier.d.ts.map