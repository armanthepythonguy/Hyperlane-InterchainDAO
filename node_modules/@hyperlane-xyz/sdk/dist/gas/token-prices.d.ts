import CoinGecko from 'coingecko-api';
import { ChainMetadata } from '../consts/chainMetadata';
import { ChainMap, ChainName } from '../types';
export interface TokenPriceGetter {
    getTokenPrice(chain: ChainName): Promise<number>;
    getTokenExchangeRate(base: ChainName, quote: ChainName): Promise<number>;
}
export declare type CoinGeckoInterface = Pick<CoinGecko, 'simple'>;
export declare type CoinGeckoSimpleInterface = CoinGecko['simple'];
export declare type CoinGeckoSimplePriceParams = Parameters<CoinGeckoSimpleInterface['price']>[0];
export declare type CoinGeckoResponse = ReturnType<CoinGeckoSimpleInterface['price']>;
declare type TokenPriceCacheEntry = {
    price: number;
    timestamp: Date;
};
declare class TokenPriceCache {
    protected cache: Map<ChainName, TokenPriceCacheEntry>;
    protected freshSeconds: number;
    protected evictionSeconds: number;
    constructor(freshSeconds?: number, evictionSeconds?: number);
    put(chain: ChainName, price: number): void;
    isFresh(chain: ChainName): boolean;
    fetch(chain: ChainName): number;
}
export declare class CoinGeckoTokenPriceGetter implements TokenPriceGetter {
    protected coinGecko: CoinGeckoInterface;
    protected cache: TokenPriceCache;
    protected metadata: ChainMap<ChainMetadata>;
    constructor(coinGecko: CoinGeckoInterface, expirySeconds?: number, chainMetadata?: ChainMap<ChainMetadata>);
    static withDefaultCoinGecko(expirySeconds?: number): CoinGeckoTokenPriceGetter;
    getTokenPrice(chain: ChainName): Promise<number>;
    getTokenExchangeRate(base: ChainName, quote: ChainName): Promise<number>;
    private getTokenPrices;
    private queryTokenPrices;
}
export {};
//# sourceMappingURL=token-prices.d.ts.map