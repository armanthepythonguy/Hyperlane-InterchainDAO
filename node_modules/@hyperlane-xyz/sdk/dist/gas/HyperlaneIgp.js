"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperlaneIgp = void 0;
const core_1 = require("@hyperlane-xyz/core");
const HyperlaneApp_1 = require("../HyperlaneApp");
const environments_1 = require("../consts/environments");
const contracts_1 = require("../contracts");
const contracts_2 = require("./contracts");
class HyperlaneIgp extends HyperlaneApp_1.HyperlaneApp {
    static fromEnvironment(env, multiProvider) {
        const envAddresses = environments_1.hyperlaneEnvironments[env];
        if (!envAddresses) {
            throw new Error(`No addresses found for ${env}`);
        }
        return HyperlaneIgp.fromAddressesMap(envAddresses, multiProvider);
    }
    static fromAddressesMap(addressesMap, multiProvider) {
        const helper = (0, contracts_1.appFromAddressesMapHelper)(addressesMap, contracts_2.igpFactories, multiProvider);
        return new HyperlaneIgp(helper.contractsMap, helper.multiProvider);
    }
    /**
     * Calls the default ISM IGP's `quoteGasPayment` function to get the amount of native tokens
     * required to pay for interchain gas.
     * The default ISM IGP will add any gas overhead amounts related to the Mailbox
     * and default ISM on the destination to the provided gasAmount.
     * @param origin The name of the origin chain.
     * @param destination The name of the destination chain.
     * @param gasAmount The amount of gas to use when calling `quoteGasPayment`.
     * The default IGP is expected to add any gas overhead related to the Mailbox
     * or ISM, so this gas amount is only required to cover the usage of the `handle`
     * function.
     * @returns The amount of native tokens required to pay for interchain gas.
     */
    quoteGasPayment(origin, destination, gasAmount) {
        const igp = this.getContracts(origin).interchainGasPaymaster;
        return this.quoteGasPaymentForIgp(origin, destination, gasAmount, igp.address);
    }
    /**
     * Calls the default ISM IGP's `quoteGasPayment` function to get the amount of native tokens
     * required to pay for interchain gas.
     * The default ISM IGP will add any gas overhead amounts related to the Mailbox
     * and default ISM on the destination to the provided gasAmount.
     * @param origin The name of the origin chain.
     * @param destination The name of the destination chain.
     * @param gasAmount The amount of gas to use when calling `quoteGasPayment`.
     * The default IGP is expected to add any gas overhead related to the Mailbox
     * or ISM, so this gas amount is only required to cover the usage of the `handle`
     * function.
     * @returns The amount of native tokens required to pay for interchain gas.
     */
    quoteGasPaymentForDefaultIsmIgp(origin, destination, gasAmount) {
        const igp = this.getContracts(origin).defaultIsmInterchainGasPaymaster;
        return this.quoteGasPaymentForIgp(origin, destination, gasAmount, igp.address);
    }
    /**
     * Calls the origin's default IGP's `quoteGasPayment` function to get the
     * amount of native tokens required to pay for interchain gas.
     * The default IGP is expected to add any gas overhead related to the Mailbox
     * and ISM to the provided gasAmount.
     * @param origin The name of the origin chain.
     * @param destination The name of the destination chain.
     * @param gasAmount The amount of gas to use when calling `quoteGasPayment`.
     * The default IGP is expected to add any gas overhead related to the Mailbox
     * or ISM, so this gas amount is only required to cover the usage of the `handle`
     * function.
     * @returns The amount of native tokens required to pay for interchain gas.
     */
    quoteGasPaymentForIgp(origin, destination, gasAmount, interchainGasPaymasterAddress) {
        const originProvider = this.multiProvider.getProvider(origin);
        const igp = core_1.InterchainGasPaymaster__factory.connect(interchainGasPaymasterAddress, originProvider);
        const domainId = this.multiProvider.getDomainId(destination);
        return igp.quoteGasPayment(domainId, gasAmount);
    }
}
exports.HyperlaneIgp = HyperlaneIgp;
//# sourceMappingURL=HyperlaneIgp.js.map