"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chains_1 = require("../consts/chains");
const testUtils_1 = require("../test/testUtils");
const token_prices_1 = require("./token-prices");
describe('TokenPriceGetter', () => {
    let tokenPriceGetter;
    let mockCoinGecko;
    const chainA = chains_1.Chains.ethereum, chainB = chains_1.Chains.polygon, priceA = 10, priceB = 5.5;
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        mockCoinGecko = new testUtils_1.MockCoinGecko();
        // Origin token
        mockCoinGecko.setTokenPrice(chainA, priceA);
        // Destination token
        mockCoinGecko.setTokenPrice(chainB, priceB);
        tokenPriceGetter = new token_prices_1.CoinGeckoTokenPriceGetter(mockCoinGecko);
    }));
    describe('getTokenPrice', () => {
        it('returns a token price', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, chai_1.expect)(yield tokenPriceGetter.getTokenPrice(chainA)).to.equal(priceA);
        }));
        it('caches a token price', () => __awaiter(void 0, void 0, void 0, function* () {
            mockCoinGecko.setFail(chainA, true);
            (0, chai_1.expect)(yield tokenPriceGetter.getTokenPrice(chainA)).to.equal(priceA);
            mockCoinGecko.setFail(chainA, false);
        }));
    });
    describe('getTokenExchangeRate', () => {
        it('returns a value consistent with getTokenPrice()', () => __awaiter(void 0, void 0, void 0, function* () {
            const exchangeRate = yield tokenPriceGetter.getTokenExchangeRate(chainA, chainB);
            const expectedExchangeRate = priceA / priceB;
            (0, chai_1.expect)(exchangeRate).to.equal(expectedExchangeRate);
        }));
    });
});
//# sourceMappingURL=token-prices.test.js.map