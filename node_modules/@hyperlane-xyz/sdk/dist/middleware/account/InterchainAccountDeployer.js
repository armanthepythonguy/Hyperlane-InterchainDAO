"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterchainAccountDeployer = void 0;
const core_1 = require("@hyperlane-xyz/core");
const HyperlaneRouterDeployer_1 = require("../../router/HyperlaneRouterDeployer");
const contracts_1 = require("./contracts");
class InterchainAccountDeployer extends HyperlaneRouterDeployer_1.HyperlaneRouterDeployer {
    constructor(multiProvider) {
        super(multiProvider, contracts_1.interchainAccountFactories, {});
    }
    router(contracts) {
        return contracts.interchainAccountRouter;
    }
    // The OwnableMulticall implementation has an immutable owner address that
    // must be set to the InterchainAccountRouter proxy address. To achieve this, we
    // 1. deploy the proxy first with a dummy implementation
    // 2. deploy the real InterchainAccountRouter and OwnableMulticall implementation with proxy address
    // 3. upgrade the proxy to the real implementation and initialize
    deployContracts(chain, config) {
        const _super = Object.create(null, {
            upgradeAndInitialize: { get: () => super.upgradeAndInitialize },
            changeAdmin: { get: () => super.changeAdmin }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (config.interchainSecurityModule) {
                throw new Error('Configuration of ISM address not supported in ICA deployer');
            }
            const proxyAdmin = yield this.deployContract(chain, 'proxyAdmin', []);
            const interchainAccountIsm = yield this.deployContract(chain, 'interchainAccountIsm', [config.mailbox]);
            let interchainAccountRouter;
            // adapted from HyperlaneDeployer.deployProxiedContract
            const cachedRouter = this.readCache(chain, this.factories['interchainAccountRouter'], 'interchainAccountRouter');
            if (cachedRouter) {
                interchainAccountRouter = cachedRouter;
            }
            else {
                const deployer = yield this.multiProvider.getSignerAddress(chain);
                // 1. deploy the proxy first with a dummy implementation (proxy admin contract)
                const proxy = yield this.deployContractFromFactory(chain, new core_1.TransparentUpgradeableProxy__factory(), 'TransparentUpgradeableProxy', [proxyAdmin.address, deployer, '0x']);
                // 2. deploy the real InterchainAccountRouter and OwnableMulticall implementation with proxy address
                const domainId = this.multiProvider.getDomainId(chain);
                const implementation = yield this.deployContract(chain, 'interchainAccountRouter', [domainId, proxy.address]);
                // 3. upgrade the proxy to the real implementation and initialize
                const owner = deployer;
                yield _super.upgradeAndInitialize.call(this, chain, proxy, implementation, [
                    config.mailbox,
                    config.interchainGasPaymaster,
                    interchainAccountIsm.address,
                    owner,
                ]);
                interchainAccountRouter = implementation.attach(proxy.address);
                this.writeCache(chain, 'interchainAccountRouter', proxy.address);
            }
            const proxy = core_1.TransparentUpgradeableProxy__factory.connect(interchainAccountRouter.address, this.multiProvider.getSignerOrProvider(chain));
            yield _super.changeAdmin.call(this, chain, proxy, proxyAdmin.address);
            return {
                proxyAdmin,
                interchainAccountIsm,
                interchainAccountRouter,
            };
        });
    }
}
exports.InterchainAccountDeployer = InterchainAccountDeployer;
//# sourceMappingURL=InterchainAccountDeployer.js.map