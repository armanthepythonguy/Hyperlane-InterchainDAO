import { CircleBridgeAdapter, LiquidityLayerRouter, PortalAdapter } from '@hyperlane-xyz/core';
import { types } from '@hyperlane-xyz/utils';
import { HyperlaneContracts, HyperlaneContractsMap } from '../../contracts';
import { MultiProvider } from '../../providers/MultiProvider';
import { ProxiedRouterDeployer } from '../../router/ProxiedRouterDeployer';
import { RouterConfig } from '../../router/types';
import { ChainMap, ChainName } from '../../types';
import { LiquidityLayerFactories } from './contracts';
export declare enum BridgeAdapterType {
    Circle = "Circle",
    Portal = "Portal"
}
export interface CircleBridgeAdapterConfig {
    type: BridgeAdapterType.Circle;
    tokenMessengerAddress: string;
    messageTransmitterAddress: string;
    usdcAddress: string;
    circleDomainMapping: {
        hyperlaneDomain: number;
        circleDomain: number;
    }[];
}
export interface PortalAdapterConfig {
    type: BridgeAdapterType.Portal;
    portalBridgeAddress: string;
    wormholeDomainMapping: {
        hyperlaneDomain: number;
        wormholeDomain: number;
    }[];
}
export declare type BridgeAdapterConfig = {
    circle?: CircleBridgeAdapterConfig;
    portal?: PortalAdapterConfig;
};
export declare type LiquidityLayerConfig = RouterConfig & BridgeAdapterConfig;
export declare class LiquidityLayerDeployer extends ProxiedRouterDeployer<LiquidityLayerConfig, LiquidityLayerFactories, 'liquidityLayerRouter'> {
    readonly routerContractName = "liquidityLayerRouter";
    constructor(multiProvider: MultiProvider);
    constructorArgs(_: string, __: LiquidityLayerConfig): Promise<[]>;
    initializeArgs(chain: string, config: LiquidityLayerConfig): Promise<[
        _mailbox: string,
        _interchainGasPaymaster: string,
        _interchainSecurityModule: string,
        _owner: string
    ]>;
    enrollRemoteRouters(contractsMap: HyperlaneContractsMap<LiquidityLayerFactories>, configMap: ChainMap<LiquidityLayerConfig>, foreignRouters: ChainMap<types.Address>): Promise<void>;
    deployContracts(chain: ChainName, config: LiquidityLayerConfig): Promise<HyperlaneContracts<LiquidityLayerFactories>>;
    deployPortalAdapter(chain: ChainName, adapterConfig: PortalAdapterConfig, owner: string, router: LiquidityLayerRouter): Promise<PortalAdapter>;
    deployCircleBridgeAdapter(chain: ChainName, adapterConfig: CircleBridgeAdapterConfig, owner: string, router: LiquidityLayerRouter): Promise<CircleBridgeAdapter>;
}
//# sourceMappingURL=LiquidityLayerRouterDeployer.d.ts.map