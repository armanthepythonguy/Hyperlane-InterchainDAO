"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterchainQueryDeployer = void 0;
const ethers_1 = require("ethers");
const ProxiedRouterDeployer_1 = require("../../router/ProxiedRouterDeployer");
const contracts_1 = require("./contracts");
class InterchainQueryDeployer extends ProxiedRouterDeployer_1.ProxiedRouterDeployer {
    constructor(multiProvider) {
        super(multiProvider, contracts_1.interchainQueryFactories);
        this.routerContractName = 'interchainQueryRouter';
    }
    constructorArgs(_, __) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    initializeArgs(chain, config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const owner = yield this.multiProvider.getSignerAddress(chain);
            return [
                config.mailbox,
                config.interchainGasPaymaster,
                (_a = config.interchainSecurityModule) !== null && _a !== void 0 ? _a : ethers_1.ethers.constants.AddressZero,
                owner,
            ];
        });
    }
}
exports.InterchainQueryDeployer = InterchainQueryDeployer;
//# sourceMappingURL=InterchainQueryDeployer.js.map