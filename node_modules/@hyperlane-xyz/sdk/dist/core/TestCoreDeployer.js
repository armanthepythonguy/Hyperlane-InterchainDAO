"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCoreDeployer = void 0;
const core_1 = require("@hyperlane-xyz/core");
const chains_1 = require("../consts/chains");
const HyperlaneIsmFactory_1 = require("../ism/HyperlaneIsmFactory");
const testUtils_1 = require("../test/testUtils");
const HyperlaneCoreDeployer_1 = require("./HyperlaneCoreDeployer");
const TestCoreApp_1 = require("./TestCoreApp");
const contracts_1 = require("./contracts");
const testCoreFactories = Object.assign(Object.assign({}, contracts_1.coreFactories), { mailbox: new core_1.TestMailbox__factory(), interchainGasPaymaster: new core_1.TestInterchainGasPaymaster__factory(), testIsm: new core_1.TestMultisigIsm__factory() });
class TestCoreDeployer extends HyperlaneCoreDeployer_1.HyperlaneCoreDeployer {
    constructor(multiProvider) {
        const ismFactory = new HyperlaneIsmFactory_1.HyperlaneIsmFactory({}, multiProvider);
        super(multiProvider, ismFactory);
        this.multiProvider = multiProvider;
    }
    // deploy a test ISM instead of a real ISM
    deployIsm(chain) {
        return __awaiter(this, void 0, void 0, function* () {
            const testIsm = yield this.deployContractFromFactory(chain, testCoreFactories.testIsm, 'testIsm', []);
            yield testIsm.setAccept(true);
            return testIsm.address;
        });
    }
    deploy() {
        const _super = Object.create(null, {
            deploy: { get: () => super.deploy }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.deploy.call(this, (0, testUtils_1.testCoreConfig)(chains_1.TestChains));
        });
    }
    deployApp() {
        return __awaiter(this, void 0, void 0, function* () {
            return new TestCoreApp_1.TestCoreApp(yield this.deploy(), this.multiProvider);
        });
    }
}
exports.TestCoreDeployer = TestCoreDeployer;
//# sourceMappingURL=TestCoreDeployer.js.map