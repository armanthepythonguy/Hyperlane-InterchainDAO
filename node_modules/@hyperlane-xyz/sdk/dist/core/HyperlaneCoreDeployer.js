"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperlaneCoreDeployer = void 0;
const debug_1 = __importDefault(require("debug"));
const contracts_1 = require("../contracts");
const HyperlaneDeployer_1 = require("../deploy/HyperlaneDeployer");
const HyperlaneIsmFactory_1 = require("../ism/HyperlaneIsmFactory");
const contracts_2 = require("./contracts");
class HyperlaneCoreDeployer extends HyperlaneDeployer_1.HyperlaneDeployer {
    constructor(multiProvider, ismFactory) {
        super(multiProvider, contracts_2.coreFactories, {
            logger: (0, debug_1.default)('hyperlane:CoreDeployer'),
            chainTimeoutMs: 1000 * 60 * 10, // 10 minutes
        });
        this.ismFactory = ismFactory;
        this.startingBlockNumbers = {};
    }
    deployMailbox(chain, defaultIsmAddress, proxyAdmin, owner) {
        return __awaiter(this, void 0, void 0, function* () {
            const domain = this.multiProvider.getDomainId(chain);
            const mailbox = yield this.deployProxiedContract(chain, 'mailbox', proxyAdmin, [domain], [owner, defaultIsmAddress]);
            return mailbox;
        });
    }
    deployValidatorAnnounce(chain, mailboxAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const validatorAnnounce = yield this.deployContract(chain, 'validatorAnnounce', [mailboxAddress]);
            return validatorAnnounce;
        });
    }
    deployIsm(chain, config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const cachedMailbox = (_a = this.deployedContracts[chain]) === null || _a === void 0 ? void 0 : _a.mailbox;
            if (cachedMailbox) {
                const module = yield cachedMailbox.defaultIsm();
                if (yield (0, HyperlaneIsmFactory_1.moduleMatchesConfig)(chain, module, config, this.ismFactory.multiProvider, this.ismFactory.getContracts(chain))) {
                    this.logger(`Default ISM matches config for ${chain}`);
                    return module;
                }
            }
            this.logger(`Deploying new ISM to ${chain}`);
            const ism = yield this.ismFactory.deploy(chain, config);
            return ism.address;
        });
    }
    deployContracts(chain, config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (config.remove) {
                // skip deploying to chains configured to be removed
                return undefined;
            }
            this.startingBlockNumbers[chain] = yield this.multiProvider
                .getProvider(chain)
                .getBlockNumber();
            const ism = yield this.deployIsm(chain, config.defaultIsm);
            const proxyAdmin = yield this.deployContract(chain, 'proxyAdmin', []);
            const mailbox = yield this.deployMailbox(chain, ism, proxyAdmin.address, config.owner);
            const validatorAnnounce = yield this.deployValidatorAnnounce(chain, mailbox.address);
            const contracts = {
                validatorAnnounce,
                proxyAdmin,
                mailbox,
            };
            // Transfer ownership of all ownable contracts
            const ownables = yield (0, contracts_1.filterOwnableContracts)(contracts);
            yield this.transferOwnershipOfContracts(chain, config.owner, ownables);
            return contracts;
        });
    }
}
exports.HyperlaneCoreDeployer = HyperlaneCoreDeployer;
//# sourceMappingURL=HyperlaneCoreDeployer.js.map