"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCoreApp = exports.testCoreFactories = void 0;
const core_1 = require("@hyperlane-xyz/core");
const utils_1 = require("@hyperlane-xyz/utils");
const HyperlaneCore_1 = require("./HyperlaneCore");
const contracts_1 = require("./contracts");
exports.testCoreFactories = Object.assign(Object.assign({}, contracts_1.coreFactories), { mailbox: new core_1.TestMailbox__factory() });
class TestCoreApp extends HyperlaneCore_1.HyperlaneCore {
    getContracts(chain) {
        return super.getContracts(chain);
    }
    processMessages() {
        return __awaiter(this, void 0, void 0, function* () {
            const responses = new Map();
            for (const origin of this.chains()) {
                const outbound = yield this.processOutboundMessages(origin);
                const originResponses = new Map();
                this.remoteChains(origin).forEach((destination) => originResponses.set(destination, outbound.get(destination)));
                responses.set(origin, originResponses);
            }
            return responses;
        });
    }
    processOutboundMessages(origin) {
        return __awaiter(this, void 0, void 0, function* () {
            const responses = new Map();
            const contracts = this.getContracts(origin);
            const outbox = contracts.mailbox;
            const dispatchFilter = outbox.filters.Dispatch();
            const dispatches = yield outbox.queryFilter(dispatchFilter);
            for (const dispatch of dispatches) {
                const destination = dispatch.args.destination;
                if (destination === this.multiProvider.getDomainId(origin)) {
                    throw new Error('Dispatched message to local domain');
                }
                const destinationChain = this.multiProvider.getChainName(destination);
                const inbox = this.getContracts(destinationChain).mailbox;
                const id = utils_1.utils.messageId(dispatch.args.message);
                const delivered = yield inbox.delivered(id);
                if (!delivered) {
                    const response = yield inbox.process('0x', dispatch.args.message);
                    const destinationResponses = responses.get(destinationChain) || [];
                    destinationResponses.push(response);
                    responses.set(destinationChain, destinationResponses);
                }
            }
            return responses;
        });
    }
}
exports.TestCoreApp = TestCoreApp;
//# sourceMappingURL=TestCoreApp.js.map