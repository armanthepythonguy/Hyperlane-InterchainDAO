import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace CallLib {
    type StaticCallStruct = {
        to: BytesLike;
        data: BytesLike;
    };
    type StaticCallStructOutput = [string, string] & {
        to: string;
        data: string;
    };
    type StaticCallWithCallbackStruct = {
        _call: CallLib.StaticCallStruct;
        callback: BytesLike;
    };
    type StaticCallWithCallbackStructOutput = [
        CallLib.StaticCallStructOutput,
        string
    ] & {
        _call: CallLib.StaticCallStructOutput;
        callback: string;
    };
}
export interface IInterchainQueryRouterInterface extends utils.Interface {
    functions: {
        "query(uint32,address,bytes,bytes)": FunctionFragment;
        "query(uint32,((bytes32,bytes),bytes)[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "query(uint32,address,bytes,bytes)" | "query(uint32,((bytes32,bytes),bytes)[])"): FunctionFragment;
    encodeFunctionData(functionFragment: "query(uint32,address,bytes,bytes)", values: [BigNumberish, string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "query(uint32,((bytes32,bytes),bytes)[])", values: [BigNumberish, CallLib.StaticCallWithCallbackStruct[]]): string;
    decodeFunctionResult(functionFragment: "query(uint32,address,bytes,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "query(uint32,((bytes32,bytes),bytes)[])", data: BytesLike): Result;
    events: {};
}
export interface IInterchainQueryRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IInterchainQueryRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "query(uint32,address,bytes,bytes)"(_destination: BigNumberish, _to: string, _data: BytesLike, _callback: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "query(uint32,((bytes32,bytes),bytes)[])"(_destination: BigNumberish, calls: CallLib.StaticCallWithCallbackStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    "query(uint32,address,bytes,bytes)"(_destination: BigNumberish, _to: string, _data: BytesLike, _callback: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "query(uint32,((bytes32,bytes),bytes)[])"(_destination: BigNumberish, calls: CallLib.StaticCallWithCallbackStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        "query(uint32,address,bytes,bytes)"(_destination: BigNumberish, _to: string, _data: BytesLike, _callback: BytesLike, overrides?: CallOverrides): Promise<string>;
        "query(uint32,((bytes32,bytes),bytes)[])"(_destination: BigNumberish, calls: CallLib.StaticCallWithCallbackStruct[], overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        "query(uint32,address,bytes,bytes)"(_destination: BigNumberish, _to: string, _data: BytesLike, _callback: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "query(uint32,((bytes32,bytes),bytes)[])"(_destination: BigNumberish, calls: CallLib.StaticCallWithCallbackStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        "query(uint32,address,bytes,bytes)"(_destination: BigNumberish, _to: string, _data: BytesLike, _callback: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "query(uint32,((bytes32,bytes),bytes)[])"(_destination: BigNumberish, calls: CallLib.StaticCallWithCallbackStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IInterchainQueryRouter.d.ts.map