import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace CallLib {
    type CallStruct = {
        to: BytesLike;
        value: BigNumberish;
        data: BytesLike;
    };
    type CallStructOutput = [string, BigNumber, string] & {
        to: string;
        value: BigNumber;
        data: string;
    };
}
export interface InterchainAccountRouterInterface extends utils.Interface {
    functions: {
        "callRemote(uint32,address,uint256,bytes)": FunctionFragment;
        "callRemote(uint32,(bytes32,uint256,bytes)[])": FunctionFragment;
        "callRemoteWithOverrides(uint32,bytes32,bytes32,(bytes32,uint256,bytes)[])": FunctionFragment;
        "domains()": FunctionFragment;
        "enrollRemoteRouter(uint32,bytes32)": FunctionFragment;
        "enrollRemoteRouterAndIsm(uint32,bytes32,bytes32)": FunctionFragment;
        "enrollRemoteRouters(uint32[],bytes32[])": FunctionFragment;
        "getDeployedInterchainAccount(uint32,address,address,address)": FunctionFragment;
        "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)": FunctionFragment;
        "getLocalInterchainAccount(uint32,address,address,address)": FunctionFragment;
        "getLocalInterchainAccount(uint32,bytes32,bytes32,address)": FunctionFragment;
        "getRemoteInterchainAccount(uint32,address)": FunctionFragment;
        "getRemoteInterchainAccount(address,address,address)": FunctionFragment;
        "handle(uint32,bytes32,bytes)": FunctionFragment;
        "initialize(address,address,address,address)": FunctionFragment;
        "interchainGasPaymaster()": FunctionFragment;
        "interchainSecurityModule()": FunctionFragment;
        "isms(uint32)": FunctionFragment;
        "mailbox()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "routers(uint32)": FunctionFragment;
        "setInterchainGasPaymaster(address)": FunctionFragment;
        "setInterchainSecurityModule(address)": FunctionFragment;
        "setMailbox(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "callRemote(uint32,address,uint256,bytes)" | "callRemote(uint32,(bytes32,uint256,bytes)[])" | "callRemoteWithOverrides" | "domains" | "enrollRemoteRouter" | "enrollRemoteRouterAndIsm" | "enrollRemoteRouters" | "getDeployedInterchainAccount(uint32,address,address,address)" | "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)" | "getLocalInterchainAccount(uint32,address,address,address)" | "getLocalInterchainAccount(uint32,bytes32,bytes32,address)" | "getRemoteInterchainAccount(uint32,address)" | "getRemoteInterchainAccount(address,address,address)" | "handle" | "initialize" | "interchainGasPaymaster" | "interchainSecurityModule" | "isms" | "mailbox" | "owner" | "renounceOwnership" | "routers" | "setInterchainGasPaymaster" | "setInterchainSecurityModule" | "setMailbox" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "callRemote(uint32,address,uint256,bytes)", values: [BigNumberish, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "callRemote(uint32,(bytes32,uint256,bytes)[])", values: [BigNumberish, CallLib.CallStruct[]]): string;
    encodeFunctionData(functionFragment: "callRemoteWithOverrides", values: [BigNumberish, BytesLike, BytesLike, CallLib.CallStruct[]]): string;
    encodeFunctionData(functionFragment: "domains", values?: undefined): string;
    encodeFunctionData(functionFragment: "enrollRemoteRouter", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "enrollRemoteRouterAndIsm", values: [BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "enrollRemoteRouters", values: [BigNumberish[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "getDeployedInterchainAccount(uint32,address,address,address)", values: [BigNumberish, string, string, string]): string;
    encodeFunctionData(functionFragment: "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)", values: [BigNumberish, BytesLike, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getLocalInterchainAccount(uint32,address,address,address)", values: [BigNumberish, string, string, string]): string;
    encodeFunctionData(functionFragment: "getLocalInterchainAccount(uint32,bytes32,bytes32,address)", values: [BigNumberish, BytesLike, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getRemoteInterchainAccount(uint32,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getRemoteInterchainAccount(address,address,address)", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "handle", values: [BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string, string, string, string]): string;
    encodeFunctionData(functionFragment: "interchainGasPaymaster", values?: undefined): string;
    encodeFunctionData(functionFragment: "interchainSecurityModule", values?: undefined): string;
    encodeFunctionData(functionFragment: "isms", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "mailbox", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "routers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setInterchainGasPaymaster", values: [string]): string;
    encodeFunctionData(functionFragment: "setInterchainSecurityModule", values: [string]): string;
    encodeFunctionData(functionFragment: "setMailbox", values: [string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "callRemote(uint32,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "callRemote(uint32,(bytes32,uint256,bytes)[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "callRemoteWithOverrides", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enrollRemoteRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enrollRemoteRouterAndIsm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enrollRemoteRouters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDeployedInterchainAccount(uint32,address,address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLocalInterchainAccount(uint32,address,address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLocalInterchainAccount(uint32,bytes32,bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRemoteInterchainAccount(uint32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRemoteInterchainAccount(address,address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interchainGasPaymaster", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interchainSecurityModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isms", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mailbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterchainGasPaymaster", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterchainSecurityModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMailbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "InterchainAccountCreated(uint32,bytes32,address,address)": EventFragment;
        "InterchainGasPaymasterSet(address)": EventFragment;
        "InterchainSecurityModuleSet(address)": EventFragment;
        "MailboxSet(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RemoteCallDispatched(uint32,address,bytes32,bytes32)": EventFragment;
        "RemoteIsmEnrolled(uint32,bytes32)": EventFragment;
        "RemoteRouterEnrolled(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterchainAccountCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterchainGasPaymasterSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterchainSecurityModuleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MailboxSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoteCallDispatched"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoteIsmEnrolled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoteRouterEnrolled"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export declare type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export declare type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface InterchainAccountCreatedEventObject {
    origin: number;
    owner: string;
    ism: string;
    account: string;
}
export declare type InterchainAccountCreatedEvent = TypedEvent<[
    number,
    string,
    string,
    string
], InterchainAccountCreatedEventObject>;
export declare type InterchainAccountCreatedEventFilter = TypedEventFilter<InterchainAccountCreatedEvent>;
export interface InterchainGasPaymasterSetEventObject {
    interchainGasPaymaster: string;
}
export declare type InterchainGasPaymasterSetEvent = TypedEvent<[
    string
], InterchainGasPaymasterSetEventObject>;
export declare type InterchainGasPaymasterSetEventFilter = TypedEventFilter<InterchainGasPaymasterSetEvent>;
export interface InterchainSecurityModuleSetEventObject {
    module: string;
}
export declare type InterchainSecurityModuleSetEvent = TypedEvent<[
    string
], InterchainSecurityModuleSetEventObject>;
export declare type InterchainSecurityModuleSetEventFilter = TypedEventFilter<InterchainSecurityModuleSetEvent>;
export interface MailboxSetEventObject {
    mailbox: string;
}
export declare type MailboxSetEvent = TypedEvent<[string], MailboxSetEventObject>;
export declare type MailboxSetEventFilter = TypedEventFilter<MailboxSetEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RemoteCallDispatchedEventObject {
    destination: number;
    owner: string;
    router: string;
    ism: string;
}
export declare type RemoteCallDispatchedEvent = TypedEvent<[
    number,
    string,
    string,
    string
], RemoteCallDispatchedEventObject>;
export declare type RemoteCallDispatchedEventFilter = TypedEventFilter<RemoteCallDispatchedEvent>;
export interface RemoteIsmEnrolledEventObject {
    domain: number;
    ism: string;
}
export declare type RemoteIsmEnrolledEvent = TypedEvent<[
    number,
    string
], RemoteIsmEnrolledEventObject>;
export declare type RemoteIsmEnrolledEventFilter = TypedEventFilter<RemoteIsmEnrolledEvent>;
export interface RemoteRouterEnrolledEventObject {
    domain: number;
    router: string;
}
export declare type RemoteRouterEnrolledEvent = TypedEvent<[
    number,
    string
], RemoteRouterEnrolledEventObject>;
export declare type RemoteRouterEnrolledEventFilter = TypedEventFilter<RemoteRouterEnrolledEvent>;
export interface InterchainAccountRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: InterchainAccountRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "callRemote(uint32,address,uint256,bytes)"(_destination: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "callRemote(uint32,(bytes32,uint256,bytes)[])"(_destination: BigNumberish, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        callRemoteWithOverrides(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        domains(overrides?: CallOverrides): Promise<[number[]]>;
        enrollRemoteRouter(_destination: BigNumberish, _router: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        enrollRemoteRouterAndIsm(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        enrollRemoteRouters(_destinations: BigNumberish[], _routers: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "getDeployedInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "getLocalInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<[string]>;
        "getLocalInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<[string]>;
        "getRemoteInterchainAccount(uint32,address)"(_destination: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<[string]>;
        "getRemoteInterchainAccount(address,address,address)"(_owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<[string]>;
        handle(_origin: BigNumberish, _sender: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        initialize(_mailbox: string, _interchainGasPaymaster: string, _interchainSecurityModule: string, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        interchainGasPaymaster(overrides?: CallOverrides): Promise<[string]>;
        interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        mailbox(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        setInterchainGasPaymaster(_interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setInterchainSecurityModule(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMailbox(_mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    "callRemote(uint32,address,uint256,bytes)"(_destination: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "callRemote(uint32,(bytes32,uint256,bytes)[])"(_destination: BigNumberish, _calls: CallLib.CallStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callRemoteWithOverrides(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, _calls: CallLib.CallStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    domains(overrides?: CallOverrides): Promise<number[]>;
    enrollRemoteRouter(_destination: BigNumberish, _router: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    enrollRemoteRouterAndIsm(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    enrollRemoteRouters(_destinations: BigNumberish[], _routers: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "getDeployedInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "getLocalInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<string>;
    "getLocalInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<string>;
    "getRemoteInterchainAccount(uint32,address)"(_destination: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<string>;
    "getRemoteInterchainAccount(address,address,address)"(_owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<string>;
    handle(_origin: BigNumberish, _sender: BytesLike, _message: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    initialize(_mailbox: string, _interchainGasPaymaster: string, _interchainSecurityModule: string, _owner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;
    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;
    isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    mailbox(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    setInterchainGasPaymaster(_interchainGasPaymaster: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setInterchainSecurityModule(_module: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMailbox(_mailbox: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        "callRemote(uint32,address,uint256,bytes)"(_destination: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<string>;
        "callRemote(uint32,(bytes32,uint256,bytes)[])"(_destination: BigNumberish, _calls: CallLib.CallStruct[], overrides?: CallOverrides): Promise<string>;
        callRemoteWithOverrides(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, _calls: CallLib.CallStruct[], overrides?: CallOverrides): Promise<string>;
        domains(overrides?: CallOverrides): Promise<number[]>;
        enrollRemoteRouter(_destination: BigNumberish, _router: BytesLike, overrides?: CallOverrides): Promise<void>;
        enrollRemoteRouterAndIsm(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, overrides?: CallOverrides): Promise<void>;
        enrollRemoteRouters(_destinations: BigNumberish[], _routers: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "getDeployedInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<string>;
        "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<string>;
        "getLocalInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<string>;
        "getLocalInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<string>;
        "getRemoteInterchainAccount(uint32,address)"(_destination: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<string>;
        "getRemoteInterchainAccount(address,address,address)"(_owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<string>;
        handle(_origin: BigNumberish, _sender: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<void>;
        initialize(_mailbox: string, _interchainGasPaymaster: string, _interchainSecurityModule: string, _owner: string, overrides?: CallOverrides): Promise<void>;
        interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;
        interchainSecurityModule(overrides?: CallOverrides): Promise<string>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        mailbox(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        setInterchainGasPaymaster(_interchainGasPaymaster: string, overrides?: CallOverrides): Promise<void>;
        setInterchainSecurityModule(_module: string, overrides?: CallOverrides): Promise<void>;
        setMailbox(_mailbox: string, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "InterchainAccountCreated(uint32,bytes32,address,address)"(origin?: BigNumberish | null, owner?: BytesLike | null, ism?: null, account?: null): InterchainAccountCreatedEventFilter;
        InterchainAccountCreated(origin?: BigNumberish | null, owner?: BytesLike | null, ism?: null, account?: null): InterchainAccountCreatedEventFilter;
        "InterchainGasPaymasterSet(address)"(interchainGasPaymaster?: string | null): InterchainGasPaymasterSetEventFilter;
        InterchainGasPaymasterSet(interchainGasPaymaster?: string | null): InterchainGasPaymasterSetEventFilter;
        "InterchainSecurityModuleSet(address)"(module?: string | null): InterchainSecurityModuleSetEventFilter;
        InterchainSecurityModuleSet(module?: string | null): InterchainSecurityModuleSetEventFilter;
        "MailboxSet(address)"(mailbox?: string | null): MailboxSetEventFilter;
        MailboxSet(mailbox?: string | null): MailboxSetEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "RemoteCallDispatched(uint32,address,bytes32,bytes32)"(destination?: BigNumberish | null, owner?: string | null, router?: null, ism?: null): RemoteCallDispatchedEventFilter;
        RemoteCallDispatched(destination?: BigNumberish | null, owner?: string | null, router?: null, ism?: null): RemoteCallDispatchedEventFilter;
        "RemoteIsmEnrolled(uint32,bytes32)"(domain?: BigNumberish | null, ism?: null): RemoteIsmEnrolledEventFilter;
        RemoteIsmEnrolled(domain?: BigNumberish | null, ism?: null): RemoteIsmEnrolledEventFilter;
        "RemoteRouterEnrolled(uint32,bytes32)"(domain?: BigNumberish | null, router?: null): RemoteRouterEnrolledEventFilter;
        RemoteRouterEnrolled(domain?: BigNumberish | null, router?: null): RemoteRouterEnrolledEventFilter;
    };
    estimateGas: {
        "callRemote(uint32,address,uint256,bytes)"(_destination: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "callRemote(uint32,(bytes32,uint256,bytes)[])"(_destination: BigNumberish, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        callRemoteWithOverrides(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        domains(overrides?: CallOverrides): Promise<BigNumber>;
        enrollRemoteRouter(_destination: BigNumberish, _router: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        enrollRemoteRouterAndIsm(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        enrollRemoteRouters(_destinations: BigNumberish[], _routers: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "getDeployedInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "getLocalInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getLocalInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getRemoteInterchainAccount(uint32,address)"(_destination: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getRemoteInterchainAccount(address,address,address)"(_owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<BigNumber>;
        handle(_origin: BigNumberish, _sender: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        initialize(_mailbox: string, _interchainGasPaymaster: string, _interchainSecurityModule: string, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        interchainGasPaymaster(overrides?: CallOverrides): Promise<BigNumber>;
        interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        mailbox(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        setInterchainGasPaymaster(_interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setInterchainSecurityModule(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMailbox(_mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        "callRemote(uint32,address,uint256,bytes)"(_destination: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "callRemote(uint32,(bytes32,uint256,bytes)[])"(_destination: BigNumberish, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        callRemoteWithOverrides(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, _calls: CallLib.CallStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        domains(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enrollRemoteRouter(_destination: BigNumberish, _router: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        enrollRemoteRouterAndIsm(_destination: BigNumberish, _router: BytesLike, _ism: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        enrollRemoteRouters(_destinations: BigNumberish[], _routers: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "getDeployedInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "getDeployedInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "getLocalInterchainAccount(uint32,address,address,address)"(_origin: BigNumberish, _owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getLocalInterchainAccount(uint32,bytes32,bytes32,address)"(_origin: BigNumberish, _owner: BytesLike, _router: BytesLike, _ism: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRemoteInterchainAccount(uint32,address)"(_destination: BigNumberish, _owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRemoteInterchainAccount(address,address,address)"(_owner: string, _router: string, _ism: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        handle(_origin: BigNumberish, _sender: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        initialize(_mailbox: string, _interchainGasPaymaster: string, _interchainSecurityModule: string, _owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        interchainGasPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        interchainSecurityModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setInterchainGasPaymaster(_interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setInterchainSecurityModule(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMailbox(_mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=InterchainAccountRouter.d.ts.map