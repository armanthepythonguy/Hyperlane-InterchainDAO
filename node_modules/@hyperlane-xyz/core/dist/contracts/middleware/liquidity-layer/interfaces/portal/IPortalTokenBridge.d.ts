import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace IPortalTokenBridge {
    type TransferWithPayloadStruct = {
        payloadID: BigNumberish;
        amount: BigNumberish;
        tokenAddress: BytesLike;
        tokenChain: BigNumberish;
        to: BytesLike;
        toChain: BigNumberish;
        fromAddress: BytesLike;
        payload: BytesLike;
    };
    type TransferWithPayloadStructOutput = [
        number,
        BigNumber,
        string,
        number,
        string,
        number,
        string,
        string
    ] & {
        payloadID: number;
        amount: BigNumber;
        tokenAddress: string;
        tokenChain: number;
        to: string;
        toChain: number;
        fromAddress: string;
        payload: string;
    };
}
export interface IPortalTokenBridgeInterface extends utils.Interface {
    functions: {
        "completeTransferWithPayload(bytes)": FunctionFragment;
        "isWrappedAsset(address)": FunctionFragment;
        "parseTransferWithPayload(bytes)": FunctionFragment;
        "transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)": FunctionFragment;
        "wrappedAsset(uint16,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "completeTransferWithPayload" | "isWrappedAsset" | "parseTransferWithPayload" | "transferTokensWithPayload" | "wrappedAsset"): FunctionFragment;
    encodeFunctionData(functionFragment: "completeTransferWithPayload", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isWrappedAsset", values: [string]): string;
    encodeFunctionData(functionFragment: "parseTransferWithPayload", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferTokensWithPayload", values: [
        string,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "wrappedAsset", values: [BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "completeTransferWithPayload", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isWrappedAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "parseTransferWithPayload", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferTokensWithPayload", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wrappedAsset", data: BytesLike): Result;
    events: {
        "ContractUpgraded(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
}
export interface ContractUpgradedEventObject {
    oldContract: string;
    newContract: string;
}
export declare type ContractUpgradedEvent = TypedEvent<[
    string,
    string
], ContractUpgradedEventObject>;
export declare type ContractUpgradedEventFilter = TypedEventFilter<ContractUpgradedEvent>;
export interface IPortalTokenBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPortalTokenBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        completeTransferWithPayload(encodedVm: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isWrappedAsset(token: string, overrides?: CallOverrides): Promise<[boolean]>;
        parseTransferWithPayload(encoded: BytesLike, overrides?: CallOverrides): Promise<[
            IPortalTokenBridge.TransferWithPayloadStructOutput
        ] & {
            transfer: IPortalTokenBridge.TransferWithPayloadStructOutput;
        }>;
        transferTokensWithPayload(token: string, amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike, nonce: BigNumberish, payload: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        wrappedAsset(tokenChainId: BigNumberish, tokenAddress: BytesLike, overrides?: CallOverrides): Promise<[string]>;
    };
    completeTransferWithPayload(encodedVm: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isWrappedAsset(token: string, overrides?: CallOverrides): Promise<boolean>;
    parseTransferWithPayload(encoded: BytesLike, overrides?: CallOverrides): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;
    transferTokensWithPayload(token: string, amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike, nonce: BigNumberish, payload: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    wrappedAsset(tokenChainId: BigNumberish, tokenAddress: BytesLike, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        completeTransferWithPayload(encodedVm: BytesLike, overrides?: CallOverrides): Promise<string>;
        isWrappedAsset(token: string, overrides?: CallOverrides): Promise<boolean>;
        parseTransferWithPayload(encoded: BytesLike, overrides?: CallOverrides): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;
        transferTokensWithPayload(token: string, amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike, nonce: BigNumberish, payload: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        wrappedAsset(tokenChainId: BigNumberish, tokenAddress: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ContractUpgraded(address,address)"(oldContract?: string | null, newContract?: string | null): ContractUpgradedEventFilter;
        ContractUpgraded(oldContract?: string | null, newContract?: string | null): ContractUpgradedEventFilter;
    };
    estimateGas: {
        completeTransferWithPayload(encodedVm: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isWrappedAsset(token: string, overrides?: CallOverrides): Promise<BigNumber>;
        parseTransferWithPayload(encoded: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        transferTokensWithPayload(token: string, amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike, nonce: BigNumberish, payload: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        wrappedAsset(tokenChainId: BigNumberish, tokenAddress: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        completeTransferWithPayload(encodedVm: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isWrappedAsset(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        parseTransferWithPayload(encoded: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferTokensWithPayload(token: string, amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike, nonce: BigNumberish, payload: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        wrappedAsset(tokenChainId: BigNumberish, tokenAddress: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IPortalTokenBridge.d.ts.map