import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface OptimismISMInterface extends utils.Interface {
    functions: {
        "l1Hook()": FunctionFragment;
        "moduleType()": FunctionFragment;
        "setOptimismHook(address)": FunctionFragment;
        "verifiedMessageIds(bytes32,address)": FunctionFragment;
        "verify(bytes,bytes)": FunctionFragment;
        "verifyMessageId(address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "l1Hook" | "moduleType" | "setOptimismHook" | "verifiedMessageIds" | "verify" | "verifyMessageId"): FunctionFragment;
    encodeFunctionData(functionFragment: "l1Hook", values?: undefined): string;
    encodeFunctionData(functionFragment: "moduleType", values?: undefined): string;
    encodeFunctionData(functionFragment: "setOptimismHook", values: [string]): string;
    encodeFunctionData(functionFragment: "verifiedMessageIds", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "verifyMessageId", values: [string, BytesLike]): string;
    decodeFunctionResult(functionFragment: "l1Hook", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOptimismHook", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiedMessageIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyMessageId", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "ReceivedMessage(address,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceivedMessage"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export declare type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export declare type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface ReceivedMessageEventObject {
    sender: string;
    messageId: string;
}
export declare type ReceivedMessageEvent = TypedEvent<[
    string,
    string
], ReceivedMessageEventObject>;
export declare type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;
export interface OptimismISM extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OptimismISMInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        l1Hook(overrides?: CallOverrides): Promise<[string]>;
        moduleType(overrides?: CallOverrides): Promise<[number]>;
        setOptimismHook(_l1Hook: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        verifiedMessageIds(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;
        verify(arg0: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        verifyMessageId(_sender: string, _messageId: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    l1Hook(overrides?: CallOverrides): Promise<string>;
    moduleType(overrides?: CallOverrides): Promise<number>;
    setOptimismHook(_l1Hook: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    verifiedMessageIds(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<boolean>;
    verify(arg0: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    verifyMessageId(_sender: string, _messageId: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        l1Hook(overrides?: CallOverrides): Promise<string>;
        moduleType(overrides?: CallOverrides): Promise<number>;
        setOptimismHook(_l1Hook: string, overrides?: CallOverrides): Promise<void>;
        verifiedMessageIds(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<boolean>;
        verify(arg0: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        verifyMessageId(_sender: string, _messageId: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "ReceivedMessage(address,bytes32)"(sender?: string | null, messageId?: BytesLike | null): ReceivedMessageEventFilter;
        ReceivedMessage(sender?: string | null, messageId?: BytesLike | null): ReceivedMessageEventFilter;
    };
    estimateGas: {
        l1Hook(overrides?: CallOverrides): Promise<BigNumber>;
        moduleType(overrides?: CallOverrides): Promise<BigNumber>;
        setOptimismHook(_l1Hook: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        verifiedMessageIds(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        verify(arg0: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        verifyMessageId(_sender: string, _messageId: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        l1Hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setOptimismHook(_l1Hook: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        verifiedMessageIds(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(arg0: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifyMessageId(_sender: string, _messageId: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OptimismISM.d.ts.map