import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface DomainRoutingIsmInterface extends utils.Interface {
    functions: {
        "initialize(address,uint32[],address[])": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "moduleType()": FunctionFragment;
        "modules(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "route(bytes)": FunctionFragment;
        "set(uint32,address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verify(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "initialize(address,uint32[],address[])" | "initialize(address)" | "moduleType" | "modules" | "owner" | "renounceOwnership" | "route" | "set" | "transferOwnership" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "initialize(address,uint32[],address[])", values: [string, BigNumberish[], string[]]): string;
    encodeFunctionData(functionFragment: "initialize(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "moduleType", values?: undefined): string;
    encodeFunctionData(functionFragment: "modules", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "route", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "set", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "initialize(address,uint32[],address[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "route", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "ModuleSet(uint32,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ModuleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export declare type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export declare type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface ModuleSetEventObject {
    domain: number;
    module: string;
}
export declare type ModuleSetEvent = TypedEvent<[number, string], ModuleSetEventObject>;
export declare type ModuleSetEventFilter = TypedEventFilter<ModuleSetEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface DomainRoutingIsm extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DomainRoutingIsmInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "initialize(address,uint32[],address[])"(_owner: string, _domains: BigNumberish[], _modules: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "initialize(address)"(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        moduleType(overrides?: CallOverrides): Promise<[number]>;
        modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        route(_message: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        set(_domain: BigNumberish, _module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    "initialize(address,uint32[],address[])"(_owner: string, _domains: BigNumberish[], _modules: string[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "initialize(address)"(_owner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    moduleType(overrides?: CallOverrides): Promise<number>;
    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    route(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    set(_domain: BigNumberish, _module: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        "initialize(address,uint32[],address[])"(_owner: string, _domains: BigNumberish[], _modules: string[], overrides?: CallOverrides): Promise<void>;
        "initialize(address)"(_owner: string, overrides?: CallOverrides): Promise<void>;
        moduleType(overrides?: CallOverrides): Promise<number>;
        modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        route(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        set(_domain: BigNumberish, _module: string, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "ModuleSet(uint32,address)"(domain?: BigNumberish | null, module?: null): ModuleSetEventFilter;
        ModuleSet(domain?: BigNumberish | null, module?: null): ModuleSetEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        "initialize(address,uint32[],address[])"(_owner: string, _domains: BigNumberish[], _modules: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "initialize(address)"(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        moduleType(overrides?: CallOverrides): Promise<BigNumber>;
        modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        route(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        set(_domain: BigNumberish, _module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        "initialize(address,uint32[],address[])"(_owner: string, _domains: BigNumberish[], _modules: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "initialize(address)"(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        route(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        set(_domain: BigNumberish, _module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=DomainRoutingIsm.d.ts.map