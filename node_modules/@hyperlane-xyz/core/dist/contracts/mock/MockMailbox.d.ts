import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface MockMailboxInterface extends utils.Interface {
    functions: {
        "MAX_MESSAGE_BODY_BYTES()": FunctionFragment;
        "VERSION()": FunctionFragment;
        "addInboundMessage(uint32,uint32,address,address,bytes)": FunctionFragment;
        "addRemoteMailbox(uint32,address)": FunctionFragment;
        "defaultIsm()": FunctionFragment;
        "dispatch(uint32,bytes32,bytes)": FunctionFragment;
        "inboundMessages(uint256)": FunctionFragment;
        "inboundProcessedNonce()": FunctionFragment;
        "inboundUnprocessedNonce()": FunctionFragment;
        "localDomain()": FunctionFragment;
        "outboundNonce()": FunctionFragment;
        "processNextInboundMessage()": FunctionFragment;
        "remoteMailboxes(uint32)": FunctionFragment;
        "setDefaultIsm(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAX_MESSAGE_BODY_BYTES" | "VERSION" | "addInboundMessage" | "addRemoteMailbox" | "defaultIsm" | "dispatch" | "inboundMessages" | "inboundProcessedNonce" | "inboundUnprocessedNonce" | "localDomain" | "outboundNonce" | "processNextInboundMessage" | "remoteMailboxes" | "setDefaultIsm"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAX_MESSAGE_BODY_BYTES", values?: undefined): string;
    encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "addInboundMessage", values: [BigNumberish, BigNumberish, string, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "addRemoteMailbox", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "defaultIsm", values?: undefined): string;
    encodeFunctionData(functionFragment: "dispatch", values: [BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboundMessages", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "inboundProcessedNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundUnprocessedNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "localDomain", values?: undefined): string;
    encodeFunctionData(functionFragment: "outboundNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "processNextInboundMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "remoteMailboxes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultIsm", values: [string]): string;
    decodeFunctionResult(functionFragment: "MAX_MESSAGE_BODY_BYTES", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addInboundMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addRemoteMailbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultIsm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundProcessedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundUnprocessedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processNextInboundMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "remoteMailboxes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultIsm", data: BytesLike): Result;
    events: {};
}
export interface MockMailbox extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockMailboxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<[BigNumber]>;
        VERSION(overrides?: CallOverrides): Promise<[number]>;
        addInboundMessage(_nonce: BigNumberish, _origin: BigNumberish, _sender: string, _recipient: string, _body: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        addRemoteMailbox(_domain: BigNumberish, _mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        defaultIsm(overrides?: CallOverrides): Promise<[string]>;
        dispatch(_destinationDomain: BigNumberish, _recipientAddress: BytesLike, _messageBody: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        inboundMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            number,
            string,
            string,
            string
        ] & {
            nonce: number;
            origin: number;
            sender: string;
            recipient: string;
            body: string;
        }>;
        inboundProcessedNonce(overrides?: CallOverrides): Promise<[number]>;
        inboundUnprocessedNonce(overrides?: CallOverrides): Promise<[number]>;
        localDomain(overrides?: CallOverrides): Promise<[number]>;
        outboundNonce(overrides?: CallOverrides): Promise<[number]>;
        processNextInboundMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        remoteMailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        setDefaultIsm(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;
    VERSION(overrides?: CallOverrides): Promise<number>;
    addInboundMessage(_nonce: BigNumberish, _origin: BigNumberish, _sender: string, _recipient: string, _body: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    addRemoteMailbox(_domain: BigNumberish, _mailbox: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    defaultIsm(overrides?: CallOverrides): Promise<string>;
    dispatch(_destinationDomain: BigNumberish, _recipientAddress: BytesLike, _messageBody: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    inboundMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
        number,
        number,
        string,
        string,
        string
    ] & {
        nonce: number;
        origin: number;
        sender: string;
        recipient: string;
        body: string;
    }>;
    inboundProcessedNonce(overrides?: CallOverrides): Promise<number>;
    inboundUnprocessedNonce(overrides?: CallOverrides): Promise<number>;
    localDomain(overrides?: CallOverrides): Promise<number>;
    outboundNonce(overrides?: CallOverrides): Promise<number>;
    processNextInboundMessage(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    remoteMailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    setDefaultIsm(_module: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;
        VERSION(overrides?: CallOverrides): Promise<number>;
        addInboundMessage(_nonce: BigNumberish, _origin: BigNumberish, _sender: string, _recipient: string, _body: BytesLike, overrides?: CallOverrides): Promise<void>;
        addRemoteMailbox(_domain: BigNumberish, _mailbox: string, overrides?: CallOverrides): Promise<void>;
        defaultIsm(overrides?: CallOverrides): Promise<string>;
        dispatch(_destinationDomain: BigNumberish, _recipientAddress: BytesLike, _messageBody: BytesLike, overrides?: CallOverrides): Promise<string>;
        inboundMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            number,
            string,
            string,
            string
        ] & {
            nonce: number;
            origin: number;
            sender: string;
            recipient: string;
            body: string;
        }>;
        inboundProcessedNonce(overrides?: CallOverrides): Promise<number>;
        inboundUnprocessedNonce(overrides?: CallOverrides): Promise<number>;
        localDomain(overrides?: CallOverrides): Promise<number>;
        outboundNonce(overrides?: CallOverrides): Promise<number>;
        processNextInboundMessage(overrides?: CallOverrides): Promise<void>;
        remoteMailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        setDefaultIsm(_module: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;
        VERSION(overrides?: CallOverrides): Promise<BigNumber>;
        addInboundMessage(_nonce: BigNumberish, _origin: BigNumberish, _sender: string, _recipient: string, _body: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        addRemoteMailbox(_domain: BigNumberish, _mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        defaultIsm(overrides?: CallOverrides): Promise<BigNumber>;
        dispatch(_destinationDomain: BigNumberish, _recipientAddress: BytesLike, _messageBody: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        inboundMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        inboundProcessedNonce(overrides?: CallOverrides): Promise<BigNumber>;
        inboundUnprocessedNonce(overrides?: CallOverrides): Promise<BigNumber>;
        localDomain(overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(overrides?: CallOverrides): Promise<BigNumber>;
        processNextInboundMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        remoteMailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultIsm(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addInboundMessage(_nonce: BigNumberish, _origin: BigNumberish, _sender: string, _recipient: string, _body: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        addRemoteMailbox(_domain: BigNumberish, _mailbox: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        defaultIsm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dispatch(_destinationDomain: BigNumberish, _recipientAddress: BytesLike, _messageBody: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        inboundMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundProcessedNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundUnprocessedNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        processNextInboundMessage(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        remoteMailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultIsm(_module: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockMailbox.d.ts.map