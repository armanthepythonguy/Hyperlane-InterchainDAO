import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace OverheadIgp {
    type DomainConfigStruct = {
        domain: BigNumberish;
        gasOverhead: BigNumberish;
    };
    type DomainConfigStructOutput = [number, BigNumber] & {
        domain: number;
        gasOverhead: BigNumber;
    };
}
export interface OverheadIgpInterface extends utils.Interface {
    functions: {
        "destinationGasAmount(uint32,uint256)": FunctionFragment;
        "destinationGasOverhead(uint32)": FunctionFragment;
        "innerIgp()": FunctionFragment;
        "owner()": FunctionFragment;
        "payForGas(bytes32,uint32,uint256,address)": FunctionFragment;
        "quoteGasPayment(uint32,uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDestinationGasOverheads((uint32,uint256)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "destinationGasAmount" | "destinationGasOverhead" | "innerIgp" | "owner" | "payForGas" | "quoteGasPayment" | "renounceOwnership" | "setDestinationGasOverheads" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "destinationGasAmount", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "destinationGasOverhead", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "innerIgp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "payForGas", values: [BytesLike, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "quoteGasPayment", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDestinationGasOverheads", values: [OverheadIgp.DomainConfigStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "destinationGasAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destinationGasOverhead", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "innerIgp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payForGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteGasPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDestinationGasOverheads", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DestinationGasOverheadSet(uint32,uint256)": EventFragment;
        "GasPayment(bytes32,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DestinationGasOverheadSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasPayment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface DestinationGasOverheadSetEventObject {
    domain: number;
    gasOverhead: BigNumber;
}
export declare type DestinationGasOverheadSetEvent = TypedEvent<[
    number,
    BigNumber
], DestinationGasOverheadSetEventObject>;
export declare type DestinationGasOverheadSetEventFilter = TypedEventFilter<DestinationGasOverheadSetEvent>;
export interface GasPaymentEventObject {
    messageId: string;
    gasAmount: BigNumber;
    payment: BigNumber;
}
export declare type GasPaymentEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], GasPaymentEventObject>;
export declare type GasPaymentEventFilter = TypedEventFilter<GasPaymentEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface OverheadIgp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OverheadIgpInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        destinationGasAmount(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        destinationGasOverhead(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        innerIgp(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        quoteGasPayment(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setDestinationGasOverheads(configs: OverheadIgp.DomainConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    destinationGasAmount(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    destinationGasOverhead(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    innerIgp(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    quoteGasPayment(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setDestinationGasOverheads(configs: OverheadIgp.DomainConfigStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        destinationGasAmount(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        destinationGasOverhead(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        innerIgp(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: CallOverrides): Promise<void>;
        quoteGasPayment(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDestinationGasOverheads(configs: OverheadIgp.DomainConfigStruct[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DestinationGasOverheadSet(uint32,uint256)"(domain?: BigNumberish | null, gasOverhead?: null): DestinationGasOverheadSetEventFilter;
        DestinationGasOverheadSet(domain?: BigNumberish | null, gasOverhead?: null): DestinationGasOverheadSetEventFilter;
        "GasPayment(bytes32,uint256,uint256)"(messageId?: BytesLike | null, gasAmount?: null, payment?: null): GasPaymentEventFilter;
        GasPayment(messageId?: BytesLike | null, gasAmount?: null, payment?: null): GasPaymentEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        destinationGasAmount(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        destinationGasOverhead(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        innerIgp(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        quoteGasPayment(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setDestinationGasOverheads(configs: OverheadIgp.DomainConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        destinationGasAmount(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        destinationGasOverhead(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        innerIgp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        quoteGasPayment(_destinationDomain: BigNumberish, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setDestinationGasOverheads(configs: OverheadIgp.DomainConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OverheadIgp.d.ts.map