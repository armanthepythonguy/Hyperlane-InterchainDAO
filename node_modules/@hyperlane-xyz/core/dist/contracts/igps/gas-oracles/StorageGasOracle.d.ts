import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace StorageGasOracle {
    type RemoteGasDataConfigStruct = {
        remoteDomain: BigNumberish;
        tokenExchangeRate: BigNumberish;
        gasPrice: BigNumberish;
    };
    type RemoteGasDataConfigStructOutput = [
        number,
        BigNumber,
        BigNumber
    ] & {
        remoteDomain: number;
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
    };
}
export interface StorageGasOracleInterface extends utils.Interface {
    functions: {
        "getExchangeRateAndGasPrice(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "remoteGasData(uint32)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setRemoteGasData((uint32,uint128,uint128))": FunctionFragment;
        "setRemoteGasDataConfigs((uint32,uint128,uint128)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getExchangeRateAndGasPrice" | "owner" | "remoteGasData" | "renounceOwnership" | "setRemoteGasData" | "setRemoteGasDataConfigs" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "getExchangeRateAndGasPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "remoteGasData", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setRemoteGasData", values: [StorageGasOracle.RemoteGasDataConfigStruct]): string;
    encodeFunctionData(functionFragment: "setRemoteGasDataConfigs", values: [StorageGasOracle.RemoteGasDataConfigStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "getExchangeRateAndGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "remoteGasData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRemoteGasData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRemoteGasDataConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "RemoteGasDataSet(uint32,uint128,uint128)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoteGasDataSet"): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RemoteGasDataSetEventObject {
    remoteDomain: number;
    tokenExchangeRate: BigNumber;
    gasPrice: BigNumber;
}
export declare type RemoteGasDataSetEvent = TypedEvent<[
    number,
    BigNumber,
    BigNumber
], RemoteGasDataSetEventObject>;
export declare type RemoteGasDataSetEventFilter = TypedEventFilter<RemoteGasDataSetEvent>;
export interface StorageGasOracle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: StorageGasOracleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        remoteGasData(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRemoteGasData(_config: StorageGasOracle.RemoteGasDataConfigStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRemoteGasDataConfigs(_configs: StorageGasOracle.RemoteGasDataConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    remoteGasData(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRemoteGasData(_config: StorageGasOracle.RemoteGasDataConfigStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRemoteGasDataConfigs(_configs: StorageGasOracle.RemoteGasDataConfigStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        remoteGasData(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setRemoteGasData(_config: StorageGasOracle.RemoteGasDataConfigStruct, overrides?: CallOverrides): Promise<void>;
        setRemoteGasDataConfigs(_configs: StorageGasOracle.RemoteGasDataConfigStruct[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "RemoteGasDataSet(uint32,uint128,uint128)"(remoteDomain?: BigNumberish | null, tokenExchangeRate?: null, gasPrice?: null): RemoteGasDataSetEventFilter;
        RemoteGasDataSet(remoteDomain?: BigNumberish | null, tokenExchangeRate?: null, gasPrice?: null): RemoteGasDataSetEventFilter;
    };
    estimateGas: {
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        remoteGasData(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRemoteGasData(_config: StorageGasOracle.RemoteGasDataConfigStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRemoteGasDataConfigs(_configs: StorageGasOracle.RemoteGasDataConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        remoteGasData(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRemoteGasData(_config: StorageGasOracle.RemoteGasDataConfigStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRemoteGasDataConfigs(_configs: StorageGasOracle.RemoteGasDataConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=StorageGasOracle.d.ts.map