import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface TestMessageInterface extends utils.Interface {
    functions: {
        "body(bytes)": FunctionFragment;
        "destination(bytes)": FunctionFragment;
        "id(bytes)": FunctionFragment;
        "nonce(bytes)": FunctionFragment;
        "origin(bytes)": FunctionFragment;
        "recipient(bytes)": FunctionFragment;
        "recipientAddress(bytes)": FunctionFragment;
        "sender(bytes)": FunctionFragment;
        "version(bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "body" | "destination" | "id" | "nonce" | "origin" | "recipient" | "recipientAddress" | "sender" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "body", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "destination", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "id", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "nonce", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "origin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "recipient", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "recipientAddress", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "sender", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "body", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destination", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recipientAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
export interface TestMessage extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestMessageInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        body(_message: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _body: string;
        }>;
        destination(_message: BytesLike, overrides?: CallOverrides): Promise<[number] & {
            _destination: number;
        }>;
        id(_message: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        nonce(_message: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            _nonce: BigNumber;
        }>;
        origin(_message: BytesLike, overrides?: CallOverrides): Promise<[number] & {
            _origin: number;
        }>;
        recipient(_message: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _recipient: string;
        }>;
        recipientAddress(_message: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _recipient: string;
        }>;
        sender(_message: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _sender: string;
        }>;
        version(_message: BytesLike, overrides?: CallOverrides): Promise<[number] & {
            _version: number;
        }>;
    };
    body(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    destination(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
    id(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    origin(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
    recipient(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    recipientAddress(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    sender(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
    version(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
    callStatic: {
        body(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        destination(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
        id(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        origin(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
        recipient(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        recipientAddress(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        sender(_message: BytesLike, overrides?: CallOverrides): Promise<string>;
        version(_message: BytesLike, overrides?: CallOverrides): Promise<number>;
    };
    filters: {};
    estimateGas: {
        body(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        destination(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        id(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        origin(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        recipient(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        recipientAddress(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sender(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        version(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        body(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        destination(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        id(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nonce(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        origin(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recipient(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recipientAddress(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sender(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestMessage.d.ts.map