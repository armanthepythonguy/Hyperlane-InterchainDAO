import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface TestSendReceiverInterface extends utils.Interface {
    functions: {
        "HANDLE_GAS_AMOUNT()": FunctionFragment;
        "dispatchToSelf(address,address,uint32,bytes)": FunctionFragment;
        "handle(uint32,bytes32,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "HANDLE_GAS_AMOUNT" | "dispatchToSelf" | "handle"): FunctionFragment;
    encodeFunctionData(functionFragment: "HANDLE_GAS_AMOUNT", values?: undefined): string;
    encodeFunctionData(functionFragment: "dispatchToSelf", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "handle", values: [BigNumberish, BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "HANDLE_GAS_AMOUNT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dispatchToSelf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
    events: {
        "Handled(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Handled"): EventFragment;
}
export interface HandledEventObject {
    blockHash: string;
}
export declare type HandledEvent = TypedEvent<[string], HandledEventObject>;
export declare type HandledEventFilter = TypedEventFilter<HandledEvent>;
export interface TestSendReceiver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestSendReceiverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;
        dispatchToSelf(_mailbox: string, _paymaster: string, _destinationDomain: BigNumberish, _messageBody: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        handle(arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
    dispatchToSelf(_mailbox: string, _paymaster: string, _destinationDomain: BigNumberish, _messageBody: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    handle(arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
        dispatchToSelf(_mailbox: string, _paymaster: string, _destinationDomain: BigNumberish, _messageBody: BytesLike, overrides?: CallOverrides): Promise<void>;
        handle(arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Handled(bytes32)"(blockHash?: null): HandledEventFilter;
        Handled(blockHash?: null): HandledEventFilter;
    };
    estimateGas: {
        HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
        dispatchToSelf(_mailbox: string, _paymaster: string, _destinationDomain: BigNumberish, _messageBody: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        handle(arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dispatchToSelf(_mailbox: string, _paymaster: string, _destinationDomain: BigNumberish, _messageBody: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        handle(arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestSendReceiver.d.ts.map