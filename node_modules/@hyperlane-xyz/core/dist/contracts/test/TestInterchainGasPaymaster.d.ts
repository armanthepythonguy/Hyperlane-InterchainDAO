import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export declare namespace InterchainGasPaymaster {
    type GasOracleConfigStruct = {
        remoteDomain: BigNumberish;
        gasOracle: string;
    };
    type GasOracleConfigStructOutput = [number, string] & {
        remoteDomain: number;
        gasOracle: string;
    };
}
export interface TestInterchainGasPaymasterInterface extends utils.Interface {
    functions: {
        "beneficiary()": FunctionFragment;
        "claim()": FunctionFragment;
        "gasOracles(uint32)": FunctionFragment;
        "gasPrice()": FunctionFragment;
        "getExchangeRateAndGasPrice(uint32)": FunctionFragment;
        "initialize(address,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "payForGas(bytes32,uint32,uint256,address)": FunctionFragment;
        "quoteGasPayment(uint32,uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setBeneficiary(address)": FunctionFragment;
        "setGasOracles((uint32,address)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "beneficiary" | "claim" | "gasOracles" | "gasPrice" | "getExchangeRateAndGasPrice" | "initialize" | "owner" | "payForGas" | "quoteGasPayment" | "renounceOwnership" | "setBeneficiary" | "setGasOracles" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "beneficiary", values?: undefined): string;
    encodeFunctionData(functionFragment: "claim", values?: undefined): string;
    encodeFunctionData(functionFragment: "gasOracles", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExchangeRateAndGasPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string, string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "payForGas", values: [BytesLike, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "quoteGasPayment", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setBeneficiary", values: [string]): string;
    encodeFunctionData(functionFragment: "setGasOracles", values: [InterchainGasPaymaster.GasOracleConfigStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "beneficiary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasOracles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExchangeRateAndGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payForGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteGasPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBeneficiary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasOracles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "BeneficiarySet(address)": EventFragment;
        "GasOracleSet(uint32,address)": EventFragment;
        "GasPayment(bytes32,uint256,uint256)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BeneficiarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasOracleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasPayment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface BeneficiarySetEventObject {
    beneficiary: string;
}
export declare type BeneficiarySetEvent = TypedEvent<[
    string
], BeneficiarySetEventObject>;
export declare type BeneficiarySetEventFilter = TypedEventFilter<BeneficiarySetEvent>;
export interface GasOracleSetEventObject {
    remoteDomain: number;
    gasOracle: string;
}
export declare type GasOracleSetEvent = TypedEvent<[
    number,
    string
], GasOracleSetEventObject>;
export declare type GasOracleSetEventFilter = TypedEventFilter<GasOracleSetEvent>;
export interface GasPaymentEventObject {
    messageId: string;
    gasAmount: BigNumber;
    payment: BigNumber;
}
export declare type GasPaymentEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], GasPaymentEventObject>;
export declare type GasPaymentEventFilter = TypedEventFilter<GasPaymentEvent>;
export interface InitializedEventObject {
    version: number;
}
export declare type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export declare type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface TestInterchainGasPaymaster extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestInterchainGasPaymasterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        beneficiary(overrides?: CallOverrides): Promise<[string]>;
        claim(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        gasOracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        initialize(_owner: string, _beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        quoteGasPayment(arg0: BigNumberish, gasAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setBeneficiary(_beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setGasOracles(_configs: InterchainGasPaymaster.GasOracleConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    beneficiary(overrides?: CallOverrides): Promise<string>;
    claim(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    gasOracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
    getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
    }>;
    initialize(_owner: string, _beneficiary: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    quoteGasPayment(arg0: BigNumberish, gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setBeneficiary(_beneficiary: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setGasOracles(_configs: InterchainGasPaymaster.GasOracleConfigStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        beneficiary(overrides?: CallOverrides): Promise<string>;
        claim(overrides?: CallOverrides): Promise<void>;
        gasOracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tokenExchangeRate: BigNumber;
            gasPrice: BigNumber;
        }>;
        initialize(_owner: string, _beneficiary: string, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: CallOverrides): Promise<void>;
        quoteGasPayment(arg0: BigNumberish, gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setBeneficiary(_beneficiary: string, overrides?: CallOverrides): Promise<void>;
        setGasOracles(_configs: InterchainGasPaymaster.GasOracleConfigStruct[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BeneficiarySet(address)"(beneficiary?: null): BeneficiarySetEventFilter;
        BeneficiarySet(beneficiary?: null): BeneficiarySetEventFilter;
        "GasOracleSet(uint32,address)"(remoteDomain?: BigNumberish | null, gasOracle?: null): GasOracleSetEventFilter;
        GasOracleSet(remoteDomain?: BigNumberish | null, gasOracle?: null): GasOracleSetEventFilter;
        "GasPayment(bytes32,uint256,uint256)"(messageId?: BytesLike | null, gasAmount?: null, payment?: null): GasPaymentEventFilter;
        GasPayment(messageId?: BytesLike | null, gasAmount?: null, payment?: null): GasPaymentEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        beneficiary(overrides?: CallOverrides): Promise<BigNumber>;
        claim(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        gasOracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_owner: string, _beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        quoteGasPayment(arg0: BigNumberish, gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setBeneficiary(_beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setGasOracles(_configs: InterchainGasPaymaster.GasOracleConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claim(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        gasOracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExchangeRateAndGasPrice(_destinationDomain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_owner: string, _beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payForGas(_messageId: BytesLike, _destinationDomain: BigNumberish, _gasAmount: BigNumberish, _refundAddress: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        quoteGasPayment(arg0: BigNumberish, gasAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setBeneficiary(_beneficiary: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setGasOracles(_configs: InterchainGasPaymaster.GasOracleConfigStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestInterchainGasPaymaster.d.ts.map