import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface TestQuerySenderInterface extends utils.Interface {
    functions: {
        "handleQueryAddressResult(address)": FunctionFragment;
        "handleQueryBytes32Result(bytes32)": FunctionFragment;
        "handleQueryUint256Result(uint256)": FunctionFragment;
        "initialize(address,address)": FunctionFragment;
        "lastAddressResult()": FunctionFragment;
        "lastBytes32Result()": FunctionFragment;
        "lastUint256Result()": FunctionFragment;
        "queryAddress(uint32,address,bytes,uint256)": FunctionFragment;
        "queryBytes32(uint32,address,bytes,uint256)": FunctionFragment;
        "queryUint256(uint32,address,bytes,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "handleQueryAddressResult" | "handleQueryBytes32Result" | "handleQueryUint256Result" | "initialize" | "lastAddressResult" | "lastBytes32Result" | "lastUint256Result" | "queryAddress" | "queryBytes32" | "queryUint256"): FunctionFragment;
    encodeFunctionData(functionFragment: "handleQueryAddressResult", values: [string]): string;
    encodeFunctionData(functionFragment: "handleQueryBytes32Result", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "handleQueryUint256Result", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string, string]): string;
    encodeFunctionData(functionFragment: "lastAddressResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastBytes32Result", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastUint256Result", values?: undefined): string;
    encodeFunctionData(functionFragment: "queryAddress", values: [BigNumberish, string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "queryBytes32", values: [BigNumberish, string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "queryUint256", values: [BigNumberish, string, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "handleQueryAddressResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "handleQueryBytes32Result", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "handleQueryUint256Result", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastAddressResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastBytes32Result", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastUint256Result", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queryAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queryBytes32", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queryUint256", data: BytesLike): Result;
    events: {
        "ReceivedAddressResult(address)": EventFragment;
        "ReceivedBytes32Result(bytes32)": EventFragment;
        "ReceivedUint256Result(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ReceivedAddressResult"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceivedBytes32Result"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceivedUint256Result"): EventFragment;
}
export interface ReceivedAddressResultEventObject {
    result: string;
}
export declare type ReceivedAddressResultEvent = TypedEvent<[
    string
], ReceivedAddressResultEventObject>;
export declare type ReceivedAddressResultEventFilter = TypedEventFilter<ReceivedAddressResultEvent>;
export interface ReceivedBytes32ResultEventObject {
    result: string;
}
export declare type ReceivedBytes32ResultEvent = TypedEvent<[
    string
], ReceivedBytes32ResultEventObject>;
export declare type ReceivedBytes32ResultEventFilter = TypedEventFilter<ReceivedBytes32ResultEvent>;
export interface ReceivedUint256ResultEventObject {
    result: BigNumber;
}
export declare type ReceivedUint256ResultEvent = TypedEvent<[
    BigNumber
], ReceivedUint256ResultEventObject>;
export declare type ReceivedUint256ResultEventFilter = TypedEventFilter<ReceivedUint256ResultEvent>;
export interface TestQuerySender extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestQuerySenderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        handleQueryAddressResult(_result: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        handleQueryBytes32Result(_result: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        handleQueryUint256Result(_result: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        initialize(_queryRouterAddress: string, _interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        lastAddressResult(overrides?: CallOverrides): Promise<[string]>;
        lastBytes32Result(overrides?: CallOverrides): Promise<[string]>;
        lastUint256Result(overrides?: CallOverrides): Promise<[BigNumber]>;
        queryAddress(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        queryBytes32(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        queryUint256(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    handleQueryAddressResult(_result: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    handleQueryBytes32Result(_result: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    handleQueryUint256Result(_result: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    initialize(_queryRouterAddress: string, _interchainGasPaymaster: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    lastAddressResult(overrides?: CallOverrides): Promise<string>;
    lastBytes32Result(overrides?: CallOverrides): Promise<string>;
    lastUint256Result(overrides?: CallOverrides): Promise<BigNumber>;
    queryAddress(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    queryBytes32(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    queryUint256(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        handleQueryAddressResult(_result: string, overrides?: CallOverrides): Promise<void>;
        handleQueryBytes32Result(_result: BytesLike, overrides?: CallOverrides): Promise<void>;
        handleQueryUint256Result(_result: BigNumberish, overrides?: CallOverrides): Promise<void>;
        initialize(_queryRouterAddress: string, _interchainGasPaymaster: string, overrides?: CallOverrides): Promise<void>;
        lastAddressResult(overrides?: CallOverrides): Promise<string>;
        lastBytes32Result(overrides?: CallOverrides): Promise<string>;
        lastUint256Result(overrides?: CallOverrides): Promise<BigNumber>;
        queryAddress(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        queryBytes32(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        queryUint256(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ReceivedAddressResult(address)"(result?: null): ReceivedAddressResultEventFilter;
        ReceivedAddressResult(result?: null): ReceivedAddressResultEventFilter;
        "ReceivedBytes32Result(bytes32)"(result?: null): ReceivedBytes32ResultEventFilter;
        ReceivedBytes32Result(result?: null): ReceivedBytes32ResultEventFilter;
        "ReceivedUint256Result(uint256)"(result?: null): ReceivedUint256ResultEventFilter;
        ReceivedUint256Result(result?: null): ReceivedUint256ResultEventFilter;
    };
    estimateGas: {
        handleQueryAddressResult(_result: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        handleQueryBytes32Result(_result: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        handleQueryUint256Result(_result: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        initialize(_queryRouterAddress: string, _interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        lastAddressResult(overrides?: CallOverrides): Promise<BigNumber>;
        lastBytes32Result(overrides?: CallOverrides): Promise<BigNumber>;
        lastUint256Result(overrides?: CallOverrides): Promise<BigNumber>;
        queryAddress(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        queryBytes32(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        queryUint256(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        handleQueryAddressResult(_result: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        handleQueryBytes32Result(_result: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        handleQueryUint256Result(_result: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        initialize(_queryRouterAddress: string, _interchainGasPaymaster: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        lastAddressResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lastBytes32Result(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lastUint256Result(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        queryAddress(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        queryBytes32(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        queryUint256(_destinationDomain: BigNumberish, _target: string, _targetData: BytesLike, _gasAmount: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestQuerySender.d.ts.map