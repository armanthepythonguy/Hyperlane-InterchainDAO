import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface TestLegacyMultisigIsmInterface extends utils.Interface {
    functions: {
        "commitment(uint32)": FunctionFragment;
        "enrollValidator(uint32,address)": FunctionFragment;
        "enrollValidators(uint32[],address[][])": FunctionFragment;
        "getDomainHash(uint32,bytes32)": FunctionFragment;
        "isEnrolled(uint32,address)": FunctionFragment;
        "moduleType()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setThreshold(uint32,uint8)": FunctionFragment;
        "setThresholds(uint32[],uint8[])": FunctionFragment;
        "threshold(uint32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "unenrollValidator(uint32,address)": FunctionFragment;
        "validatorCount(uint32)": FunctionFragment;
        "validators(uint32)": FunctionFragment;
        "validatorsAndThreshold(bytes)": FunctionFragment;
        "verify(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "commitment" | "enrollValidator" | "enrollValidators" | "getDomainHash" | "isEnrolled" | "moduleType" | "owner" | "renounceOwnership" | "setThreshold" | "setThresholds" | "threshold" | "transferOwnership" | "unenrollValidator" | "validatorCount" | "validators" | "validatorsAndThreshold" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "commitment", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "enrollValidator", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "enrollValidators", values: [BigNumberish[], string[][]]): string;
    encodeFunctionData(functionFragment: "getDomainHash", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "isEnrolled", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "moduleType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setThreshold", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setThresholds", values: [BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "threshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "unenrollValidator", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "validatorCount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "validators", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "validatorsAndThreshold", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "commitment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enrollValidator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enrollValidators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomainHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEnrolled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setThresholds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unenrollValidator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatorCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatorsAndThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {
        "CommitmentUpdated(uint32,bytes32)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ThresholdSet(uint32,uint8)": EventFragment;
        "ValidatorEnrolled(uint32,address,uint256)": EventFragment;
        "ValidatorUnenrolled(uint32,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CommitmentUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ThresholdSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorEnrolled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorUnenrolled"): EventFragment;
}
export interface CommitmentUpdatedEventObject {
    domain: number;
    commitment: string;
}
export declare type CommitmentUpdatedEvent = TypedEvent<[
    number,
    string
], CommitmentUpdatedEventObject>;
export declare type CommitmentUpdatedEventFilter = TypedEventFilter<CommitmentUpdatedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface ThresholdSetEventObject {
    domain: number;
    threshold: number;
}
export declare type ThresholdSetEvent = TypedEvent<[
    number,
    number
], ThresholdSetEventObject>;
export declare type ThresholdSetEventFilter = TypedEventFilter<ThresholdSetEvent>;
export interface ValidatorEnrolledEventObject {
    domain: number;
    validator: string;
    validatorCount: BigNumber;
}
export declare type ValidatorEnrolledEvent = TypedEvent<[
    number,
    string,
    BigNumber
], ValidatorEnrolledEventObject>;
export declare type ValidatorEnrolledEventFilter = TypedEventFilter<ValidatorEnrolledEvent>;
export interface ValidatorUnenrolledEventObject {
    domain: number;
    validator: string;
    validatorCount: BigNumber;
}
export declare type ValidatorUnenrolledEvent = TypedEvent<[
    number,
    string,
    BigNumber
], ValidatorUnenrolledEventObject>;
export declare type ValidatorUnenrolledEventFilter = TypedEventFilter<ValidatorUnenrolledEvent>;
export interface TestLegacyMultisigIsm extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestLegacyMultisigIsmInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        commitment(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        enrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        enrollValidators(_domains: BigNumberish[], _validators: string[][], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getDomainHash(_origin: BigNumberish, _originMailbox: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        isEnrolled(_domain: BigNumberish, _address: string, overrides?: CallOverrides): Promise<[boolean]>;
        moduleType(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setThreshold(_domain: BigNumberish, _threshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setThresholds(_domains: BigNumberish[], _thresholds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        unenrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        validatorCount(_domain: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        validators(_domain: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;
        validatorsAndThreshold(_message: BytesLike, overrides?: CallOverrides): Promise<[string[], number]>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
    };
    commitment(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    enrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    enrollValidators(_domains: BigNumberish[], _validators: string[][], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getDomainHash(_origin: BigNumberish, _originMailbox: BytesLike, overrides?: CallOverrides): Promise<string>;
    isEnrolled(_domain: BigNumberish, _address: string, overrides?: CallOverrides): Promise<boolean>;
    moduleType(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setThreshold(_domain: BigNumberish, _threshold: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setThresholds(_domains: BigNumberish[], _thresholds: BigNumberish[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    unenrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    validatorCount(_domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    validators(_domain: BigNumberish, overrides?: CallOverrides): Promise<string[]>;
    validatorsAndThreshold(_message: BytesLike, overrides?: CallOverrides): Promise<[string[], number]>;
    verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        commitment(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        enrollValidator(_domain: BigNumberish, _validator: string, overrides?: CallOverrides): Promise<void>;
        enrollValidators(_domains: BigNumberish[], _validators: string[][], overrides?: CallOverrides): Promise<void>;
        getDomainHash(_origin: BigNumberish, _originMailbox: BytesLike, overrides?: CallOverrides): Promise<string>;
        isEnrolled(_domain: BigNumberish, _address: string, overrides?: CallOverrides): Promise<boolean>;
        moduleType(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setThreshold(_domain: BigNumberish, _threshold: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setThresholds(_domains: BigNumberish[], _thresholds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        unenrollValidator(_domain: BigNumberish, _validator: string, overrides?: CallOverrides): Promise<void>;
        validatorCount(_domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        validators(_domain: BigNumberish, overrides?: CallOverrides): Promise<string[]>;
        validatorsAndThreshold(_message: BytesLike, overrides?: CallOverrides): Promise<[string[], number]>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "CommitmentUpdated(uint32,bytes32)"(domain?: null, commitment?: null): CommitmentUpdatedEventFilter;
        CommitmentUpdated(domain?: null, commitment?: null): CommitmentUpdatedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "ThresholdSet(uint32,uint8)"(domain?: BigNumberish | null, threshold?: null): ThresholdSetEventFilter;
        ThresholdSet(domain?: BigNumberish | null, threshold?: null): ThresholdSetEventFilter;
        "ValidatorEnrolled(uint32,address,uint256)"(domain?: BigNumberish | null, validator?: string | null, validatorCount?: null): ValidatorEnrolledEventFilter;
        ValidatorEnrolled(domain?: BigNumberish | null, validator?: string | null, validatorCount?: null): ValidatorEnrolledEventFilter;
        "ValidatorUnenrolled(uint32,address,uint256)"(domain?: BigNumberish | null, validator?: string | null, validatorCount?: null): ValidatorUnenrolledEventFilter;
        ValidatorUnenrolled(domain?: BigNumberish | null, validator?: string | null, validatorCount?: null): ValidatorUnenrolledEventFilter;
    };
    estimateGas: {
        commitment(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        enrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        enrollValidators(_domains: BigNumberish[], _validators: string[][], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getDomainHash(_origin: BigNumberish, _originMailbox: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        isEnrolled(_domain: BigNumberish, _address: string, overrides?: CallOverrides): Promise<BigNumber>;
        moduleType(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setThreshold(_domain: BigNumberish, _threshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setThresholds(_domains: BigNumberish[], _thresholds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        unenrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        validatorCount(_domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        validators(_domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        validatorsAndThreshold(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        commitment(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        enrollValidators(_domains: BigNumberish[], _validators: string[][], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getDomainHash(_origin: BigNumberish, _originMailbox: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isEnrolled(_domain: BigNumberish, _address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setThreshold(_domain: BigNumberish, _threshold: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setThresholds(_domains: BigNumberish[], _thresholds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        unenrollValidator(_domain: BigNumberish, _validator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        validatorCount(_domain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validators(_domain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatorsAndThreshold(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestLegacyMultisigIsm.d.ts.map