import type { Versioned, VersionedInterface } from "../../../contracts/upgrade/Versioned";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, ContractFactory, Overrides } from "ethers";
declare type VersionedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Versioned__factory extends ContractFactory {
    constructor(...args: VersionedConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<Versioned>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): Versioned;
    connect(signer: Signer): Versioned__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600081565b60405160ff909116815260200160405180910390f3fea2646970667358221220947241e27ad17f7d9b5194b703928276c771f8b223bcf8f64ef897737694645164736f6c63430008110033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): VersionedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Versioned;
}
export {};
//# sourceMappingURL=Versioned__factory.d.ts.map