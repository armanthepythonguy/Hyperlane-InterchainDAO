import type { BadRecipient2, BadRecipient2Interface } from "../../../../contracts/test/bad-recipient/BadRecipient2";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, ContractFactory, Overrides } from "ethers";
declare type BadRecipient2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BadRecipient2__factory extends ContractFactory {
    constructor(...args: BadRecipient2ConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<BadRecipient2>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): BadRecipient2;
    connect(signer: Signer): BadRecipient2__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b5060a78061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c122ad8d14602d575b600080fd5b603c6038366004603e565b5050565b005b60008060408385031215605057600080fd5b823563ffffffff81168114606357600080fd5b94602093909301359350505056fea264697066735822122008000fd96bbb2b602f15e146d060e148b12390beb3743a68247b654fbd44b99764736f6c63430008110033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: never[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): BadRecipient2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): BadRecipient2;
}
export {};
//# sourceMappingURL=BadRecipient2__factory.d.ts.map